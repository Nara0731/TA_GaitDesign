clear,close all,clc;

% load gait library generated by FROST
load gait_lib.mat

% generate P_map = [P1, P2, step_duration, theta_diff_during_a_step]
P_map = []; 
for i = 1:size(res,1)
    if isempty(res{i,2})
        continue   % empty solution
    end
    sol = res{i,1}(1);
    q = sol.states.x; % q = [qv, qh, q1, q2, q3, q4, q5]
    theta_diff = q(3,end)+q(4,end)+q(5,end)/2-q(3,1)-q(4,1)-q(5,1)/2; % theta = q1 + q2 + q3/2; 
    P_map = [P_map; res{i,2}, sol.params.ptime(1), theta_diff];
end

% Fit trajectories of q1~q5 and step_duration for each gait using Bezier 
% polynomials of either step_duration or theta_diff_during_a_step, and 
% record coefficients of the Bezier polynomials. Notice that both
% step_duration and theta_diff_during_a_step will be normalized to [0,1]
% in the computation below. 
syms t th real;
bez_deg = 5;

% generate Bezier monomials
bez_coeff_t = sym(zeros(1,bez_deg+1));
bez_coeff_th = sym(zeros(1,bez_deg+1));
for i = 0:bez_deg
    bez_coeff_t(i+1) = (1-t)^(bez_deg-i)*t^i*nchoosek(bez_deg,i);
    bez_coeff_th(i+1) = (1-th)^(bez_deg-i)*th^i*nchoosek(bez_deg,i);
end

% gather indices of all cases in which FROST has a feasible solution
feasible_idx = [];
for i = 1:size(res,1)
    if isstruct(res{i,1})
        feasible_idx = [feasible_idx,i];  
    end
end

% fit coefficients for the Bezier polynomial with variable :
% -- theta: Bez_map_theta
% -- time:  Bez_map_time
% Both Bez_map_theta and Bez_map_time are of size
% length(feasible_idx) X (bez_deg+1) X 5.

Bez_map_theta = zeros(size(feasible_idx,1), bez_deg+1, 5); 
Bez_map_time = zeros(size(feasible_idx,1), bez_deg+1, 5);

for i = 1:length(feasible_idx)
    sol = res{feasible_idx(i),1}(1);
    
    q = sol.states.x(3:end,:);
    time = sol.tspan/sol.params.ptime(1);
    theta = q(1,:) + q(2,:) + q(3,:)/2;
    theta = (theta-theta(1))/(theta(end)-theta(1));
    A_t = double(subs(bez_coeff_t,t,time(:)));
    A_th = double(subs(bez_coeff_th,th,theta(:)));
    
    % compute coefficient of Bezier polynomial for q1~q5
    for j = 1:5
        Bez_map_time(i,1,j) = q(j,1);
        Bez_map_time(i,end,j) = q(j,end);
        B = q(j,2:end-1)' - A_t(2:end-1,[1,end])*[q(j,1);q(j,end)];
        Bez_map_time(i,2:end-1,j) = (A_t(2:end-1,2:end-1)\B)';
        
        Bez_map_theta(i,1,j) = q(j,1);
        Bez_map_theta(i,end,j) = q(j,end);
        B = q(j,2:end-1)' - A_th(2:end-1,[1,end])*[q(j,1);q(j,end)];
        Bez_map_theta(i,2:end-1,j) = (A_th(2:end-1,2:end-1)\B)';
    end

end

save Bez_fit_res_all P_map Bez_map_time Bez_map_theta
