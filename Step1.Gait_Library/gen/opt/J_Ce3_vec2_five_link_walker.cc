/*
 * Automatically Generated from Mathematica.
 * Tue 17 Sep 2019 23:17:25 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2142;
  double t2034;
  double t2051;
  double t2164;
  double t6860;
  double t995;
  double t7233;
  double t8188;
  double t8194;
  double t8348;
  double t8350;
  double t8353;
  double t8359;
  double t8363;
  double t2063;
  double t2193;
  double t5651;
  double t6720;
  double t8204;
  double t8248;
  double t10869;
  double t10586;
  double t10827;
  double t10911;
  double t11402;
  double t11527;
  double t11630;
  double t14174;
  double t14202;
  double t14206;
  double t14211;
  double t14212;
  double t10838;
  double t11135;
  double t11174;
  double t11288;
  double t13989;
  double t14046;
  double t14288;
  double t14289;
  double t14290;
  double t8284;
  double t8298;
  double t8299;
  double t14333;
  double t14334;
  double t14335;
  double t9856;
  double t8813;
  double t8849;
  double t9260;
  double t9525;
  double t10111;
  double t14545;
  double t14562;
  double t14563;
  double t14570;
  double t14106;
  double t14149;
  double t14172;
  double t14584;
  double t14585;
  double t14586;
  double t14260;
  double t14246;
  double t14251;
  double t14252;
  double t14257;
  double t14261;
  double t14639;
  double t14327;
  double t14331;
  double t14332;
  double t14505;
  double t14509;
  double t14549;
  double t14554;
  double t14515;
  double t14533;
  double t14542;
  double t14544;
  double t14546;
  double t14576;
  double t14581;
  double t14582;
  double t14591;
  double t14593;
  double t14653;
  double t14654;
  double t14596;
  double t14597;
  double t14598;
  double t14638;
  double t14645;
  double t14709;
  double t14716;
  double t14717;
  double t14721;
  double t14722;
  double t14727;
  double t14744;
  double t14781;
  double t14784;
  double t14791;
  double t14797;
  double t14798;
  double t8344;
  double t8367;
  double t8450;
  double t8461;
  double t10137;
  double t10168;
  double t10188;
  double t10257;
  double t14811;
  double t14812;
  double t14813;
  double t14814;
  double t14815;
  double t14291;
  double t14307;
  double t14311;
  double t14494;
  double t14499;
  double t14500;
  double t14659;
  double t14660;
  double t14661;
  double t14662;
  double t14665;
  double t14666;
  double t14668;
  double t14669;
  double t14823;
  double t14824;
  double t14693;
  double t14694;
  double t14695;
  double t14700;
  double t14701;
  double t14708;
  double t14720;
  double t14728;
  double t14730;
  double t14732;
  double t14733;
  double t14735;
  double t14847;
  double t14848;
  double t14849;
  double t14816;
  double t14817;
  double t14818;
  double t14821;
  double t14822;
  double t14825;
  double t14829;
  double t14833;
  double t14837;
  double t14838;
  double t14839;
  double t14840;
  double t14841;
  double t14842;
  double t14843;
  double t14846;
  double t14851;
  double t14852;
  double t14856;
  double t14881;
  double t14882;
  double t14858;
  double t14884;
  double t14885;
  double t14860;
  double t14173;
  double t14217;
  double t14226;
  double t14242;
  double t14271;
  double t14273;
  double t14275;
  double t14276;
  double t14897;
  double t14898;
  double t14899;
  double t14900;
  double t14901;
  double t14571;
  double t14574;
  double t14575;
  double t14587;
  double t14589;
  double t14590;
  double t14671;
  double t14672;
  double t14673;
  double t14674;
  double t14677;
  double t14678;
  double t14683;
  double t14684;
  double t14909;
  double t14910;
  double t14737;
  double t14739;
  double t14740;
  double t14741;
  double t14742;
  double t14743;
  double t14785;
  double t14799;
  double t14800;
  double t14803;
  double t14804;
  double t14805;
  double t14926;
  double t14927;
  double t14928;
  double t14902;
  double t14903;
  double t14904;
  double t14907;
  double t14908;
  double t14911;
  double t14912;
  double t14915;
  double t14916;
  double t14917;
  double t14918;
  double t14919;
  double t14920;
  double t14921;
  double t14922;
  double t14925;
  double t14930;
  double t14931;
  double t14935;
  double t14960;
  double t14961;
  double t14937;
  double t14963;
  double t14964;
  double t14939;
  double t14976;
  double t14977;
  double t14978;
  double t14979;
  double t14980;
  double t14981;
  double t14982;
  double t14983;
  double t14984;
  double t14985;
  double t14986;
  double t14987;
  double t14988;
  double t14989;
  double t14990;
  double t14991;
  double t14992;
  double t14993;
  double t14994;
  double t14995;
  double t14996;
  double t14997;
  double t14998;
  double t15023;
  double t15024;
  double t15025;
  double t15026;
  double t15027;
  double t15028;
  double t15029;
  double t15030;
  double t15001;
  double t15002;
  double t15003;
  double t15004;
  double t15007;
  double t15008;
  double t15009;
  double t15010;
  double t14819;
  double t14820;
  double t14830;
  double t14831;
  double t14844;
  double t14845;
  double t14850;
  double t14853;
  double t14854;
  double t14855;
  double t14857;
  double t14859;
  double t14861;
  double t14862;
  double t14863;
  double t14864;
  double t14865;
  double t14866;
  double t15038;
  double t15066;
  double t15067;
  double t15068;
  double t15039;
  double t14871;
  double t14872;
  double t14873;
  double t15040;
  double t14867;
  double t14868;
  double t14869;
  double t15041;
  double t15044;
  double t15045;
  double t15046;
  double t15047;
  double t15048;
  double t15051;
  double t15052;
  double t15053;
  double t15054;
  double t15055;
  double t15056;
  double t15057;
  double t15060;
  double t14883;
  double t14886;
  double t14887;
  double t15062;
  double t15065;
  double t15071;
  double t14889;
  double t14890;
  double t14891;
  double t15076;
  double t15099;
  double t15100;
  double t15080;
  double t15012;
  double t15013;
  double t15119;
  double t15120;
  double t15121;
  double t15122;
  double t15123;
  double t15133;
  double t15134;
  double t15135;
  double t15136;
  double t15137;
  double t15126;
  double t15127;
  double t15128;
  double t14870;
  double t14874;
  double t14875;
  double t14876;
  double t14877;
  double t14878;
  double t14879;
  double t14880;
  double t14888;
  double t14892;
  double t14893;
  double t14894;
  double t14895;
  double t14896;
  double t15087;
  double t15088;
  double t15089;
  double t15090;
  double t15091;
  double t15092;
  double t15093;
  double t15094;
  double t15095;
  double t15096;
  double t15097;
  double t15098;
  double t15101;
  double t15102;
  double t15103;
  double t15104;
  double t15105;
  double t15106;
  double t15107;
  double t15108;
  double t15109;
  double t15110;
  double t15111;
  double t15112;
  double t15113;
  double t15114;
  double t15115;
  double t15116;
  double t15117;
  double t15118;
  double t15125;
  double t15166;
  double t15175;
  double t15176;
  double t15177;
  double t15168;
  double t15169;
  double t15170;
  double t15142;
  double t14905;
  double t14906;
  double t14913;
  double t14914;
  double t14923;
  double t14924;
  double t14929;
  double t14932;
  double t14933;
  double t14934;
  double t14936;
  double t14938;
  double t14940;
  double t14941;
  double t14942;
  double t14943;
  double t14944;
  double t14945;
  double t15182;
  double t15210;
  double t15211;
  double t15212;
  double t15183;
  double t14950;
  double t14951;
  double t14952;
  double t15184;
  double t14946;
  double t14947;
  double t14948;
  double t15185;
  double t15188;
  double t15189;
  double t15190;
  double t15191;
  double t15192;
  double t15195;
  double t15196;
  double t15197;
  double t15198;
  double t15199;
  double t15200;
  double t15201;
  double t15204;
  double t14962;
  double t14965;
  double t14966;
  double t15206;
  double t15209;
  double t15215;
  double t14968;
  double t14969;
  double t14970;
  double t15220;
  double t15243;
  double t15244;
  double t15224;
  double t15016;
  double t15017;
  double t15263;
  double t15264;
  double t15265;
  double t15266;
  double t15267;
  double t15277;
  double t15278;
  double t15279;
  double t15280;
  double t15281;
  double t15270;
  double t15271;
  double t15272;
  double t14949;
  double t14953;
  double t14954;
  double t14955;
  double t14956;
  double t14957;
  double t14958;
  double t14959;
  double t14967;
  double t14971;
  double t14972;
  double t14973;
  double t14974;
  double t14975;
  double t15231;
  double t15232;
  double t15233;
  double t15234;
  double t15235;
  double t15236;
  double t15237;
  double t15238;
  double t15239;
  double t15240;
  double t15241;
  double t15242;
  double t15245;
  double t15246;
  double t15247;
  double t15248;
  double t15249;
  double t15250;
  double t15251;
  double t15252;
  double t15253;
  double t15254;
  double t15255;
  double t15256;
  double t15257;
  double t15258;
  double t15259;
  double t15260;
  double t15261;
  double t15262;
  double t15269;
  double t15310;
  double t15319;
  double t15320;
  double t15321;
  double t15312;
  double t15313;
  double t15314;
  double t15286;
  t2142 = Cos(var1[3]);
  t2034 = Cos(var1[4]);
  t2051 = Sin(var1[3]);
  t2164 = Sin(var1[4]);
  t6860 = Sin(var1[2]);
  t995 = Cos(var1[2]);
  t7233 = t2142*t2034;
  t8188 = -1.*t2051*t2164;
  t8194 = t7233 + t8188;
  t8348 = -1.*t2034;
  t8350 = 1. + t8348;
  t8353 = 0.4*t8350;
  t8359 = 0.64*t2034;
  t8363 = t8353 + t8359;
  t2063 = -1.*t2034*t2051;
  t2193 = -1.*t2142*t2164;
  t5651 = t2063 + t2193;
  t6720 = -1.*t995*t5651;
  t8204 = t6860*t8194;
  t8248 = t6720 + t8204;
  t10869 = Cos(var1[5]);
  t10586 = Cos(var1[6]);
  t10827 = Sin(var1[5]);
  t10911 = Sin(var1[6]);
  t11402 = t10869*t10586;
  t11527 = -1.*t10827*t10911;
  t11630 = t11402 + t11527;
  t14174 = -1.*t10586;
  t14202 = 1. + t14174;
  t14206 = 0.4*t14202;
  t14211 = 0.64*t10586;
  t14212 = t14206 + t14211;
  t10838 = -1.*t10586*t10827;
  t11135 = -1.*t10869*t10911;
  t11174 = t10838 + t11135;
  t11288 = -1.*t995*t11174;
  t13989 = t6860*t11630;
  t14046 = t11288 + t13989;
  t14288 = -1.*t2142*t6860;
  t14289 = -1.*t995*t2051;
  t14290 = t14288 + t14289;
  t8284 = t2142*t6860;
  t8298 = t995*t2051;
  t8299 = t8284 + t8298;
  t14333 = -1.*t995*t2142;
  t14334 = t6860*t2051;
  t14335 = t14333 + t14334;
  t9856 = -1.*t995*t8194;
  t8813 = t2034*t2051;
  t8849 = t2142*t2164;
  t9260 = t8813 + t8849;
  t9525 = t6860*t9260;
  t10111 = t9525 + t9856;
  t14545 = -1.*t6860*t8194;
  t14562 = -1.*t10869*t6860;
  t14563 = -1.*t995*t10827;
  t14570 = t14562 + t14563;
  t14106 = t10869*t6860;
  t14149 = t995*t10827;
  t14172 = t14106 + t14149;
  t14584 = -1.*t995*t10869;
  t14585 = t6860*t10827;
  t14586 = t14584 + t14585;
  t14260 = -1.*t995*t11630;
  t14246 = t10586*t10827;
  t14251 = t10869*t10911;
  t14252 = t14246 + t14251;
  t14257 = t6860*t14252;
  t14261 = t14257 + t14260;
  t14639 = -1.*t6860*t11630;
  t14327 = t995*t2142;
  t14331 = -1.*t6860*t2051;
  t14332 = t14327 + t14331;
  t14505 = -1.*t6860*t5651;
  t14509 = t14505 + t9856;
  t14549 = t995*t5651;
  t14554 = t14549 + t14545;
  t14515 = -1.*t6860*t9260;
  t14533 = t995*t8194;
  t14542 = t14515 + t14533;
  t14544 = -1.*t995*t9260;
  t14546 = t14544 + t14545;
  t14576 = t995*t10869;
  t14581 = -1.*t6860*t10827;
  t14582 = t14576 + t14581;
  t14591 = -1.*t6860*t11174;
  t14593 = t14591 + t14260;
  t14653 = t995*t11174;
  t14654 = t14653 + t14639;
  t14596 = -1.*t6860*t14252;
  t14597 = t995*t11630;
  t14598 = t14596 + t14597;
  t14638 = -1.*t995*t14252;
  t14645 = t14638 + t14639;
  t14709 = t8363*t2051;
  t14716 = 0.24*t2142*t2164;
  t14717 = t14709 + t14716;
  t14721 = t2142*t8363;
  t14722 = -0.24*t2051*t2164;
  t14727 = t14721 + t14722;
  t14744 = t14212*t10827;
  t14781 = 0.24*t10869*t10911;
  t14784 = t14744 + t14781;
  t14791 = t10869*t14212;
  t14797 = -0.24*t10827*t10911;
  t14798 = t14791 + t14797;
  t8344 = -0.748*t8299;
  t8367 = t8363*t2164;
  t8450 = -0.24*t2034*t2164;
  t8461 = t8367 + t8450;
  t10137 = t8363*t2034;
  t10168 = Power(t2164,2);
  t10188 = 0.24*t10168;
  t10257 = t10137 + t10188;
  t14811 = -1.*t2142*t2034;
  t14812 = t2051*t2164;
  t14813 = t14811 + t14812;
  t14814 = -1.*t6860*t14813;
  t14815 = t6720 + t14814;
  t14291 = Power(t14290,2);
  t14307 = -13.6*t14291;
  t14311 = -13.6*t14290*t8299;
  t14494 = -13.6*t14332*t14335;
  t14499 = Power(t14335,2);
  t14500 = -13.6*t14499;
  t14659 = -20.4*t14290*t14332;
  t14660 = -6.8*t8299*t14332;
  t14661 = -20.4*t14290*t14335;
  t14662 = -6.8*t8299*t14335;
  t14665 = t6860*t5651;
  t14666 = t14665 + t14533;
  t14668 = t995*t9260;
  t14669 = t14668 + t8204;
  t14823 = t995*t14813;
  t14824 = t14505 + t14823;
  t14693 = Power(t2142,2);
  t14694 = 0.11*t14693;
  t14695 = Power(t2051,2);
  t14700 = 0.11*t14695;
  t14701 = t14694 + t14700;
  t14708 = -6.8*t8299*t14701;
  t14720 = -1.*t14717*t8194;
  t14728 = -1.*t5651*t14727;
  t14730 = t14720 + t14728;
  t14732 = t14717*t9260;
  t14733 = t8194*t14727;
  t14735 = t14732 + t14733;
  t14847 = -1.*t8363*t2051;
  t14848 = -0.24*t2142*t2164;
  t14849 = t14847 + t14848;
  t14816 = 0.384*var2[4]*t14815;
  t14817 = -3.2*t8461*t14509;
  t14818 = -3.2*t10257*t14815;
  t14821 = -6.4*t14509*t14542;
  t14822 = -6.4*t14554*t14546;
  t14825 = -6.4*t14509*t14824;
  t14829 = -6.4*t14554*t14815;
  t14833 = -6.4*t14542*t14554;
  t14837 = -3.2*t14666*t14546;
  t14838 = -3.2*t14509*t14669;
  t14839 = -6.4*t14554*t14824;
  t14840 = -3.2*t14666*t14815;
  t14841 = t6860*t14813;
  t14842 = t14549 + t14841;
  t14843 = -3.2*t14509*t14842;
  t14846 = -3.2*t14509*t14730;
  t14851 = t14717*t8194;
  t14852 = t5651*t14727;
  t14856 = -3.2*t14735*t14815;
  t14881 = -0.24*t2034*t2051;
  t14882 = t14881 + t14848;
  t14858 = -1.*t5651*t14717;
  t14884 = 0.24*t2142*t2034;
  t14885 = t14884 + t14722;
  t14860 = -1.*t14727*t14813;
  t14173 = -0.748*t14172;
  t14217 = t14212*t10911;
  t14226 = -0.24*t10586*t10911;
  t14242 = t14217 + t14226;
  t14271 = t14212*t10586;
  t14273 = Power(t10911,2);
  t14275 = 0.24*t14273;
  t14276 = t14271 + t14275;
  t14897 = -1.*t10869*t10586;
  t14898 = t10827*t10911;
  t14899 = t14897 + t14898;
  t14900 = -1.*t6860*t14899;
  t14901 = t11288 + t14900;
  t14571 = Power(t14570,2);
  t14574 = -13.6*t14571;
  t14575 = -13.6*t14570*t14172;
  t14587 = -13.6*t14582*t14586;
  t14589 = Power(t14586,2);
  t14590 = -13.6*t14589;
  t14671 = -20.4*t14570*t14582;
  t14672 = -6.8*t14172*t14582;
  t14673 = -20.4*t14570*t14586;
  t14674 = -6.8*t14172*t14586;
  t14677 = t6860*t11174;
  t14678 = t14677 + t14597;
  t14683 = t995*t14252;
  t14684 = t14683 + t13989;
  t14909 = t995*t14899;
  t14910 = t14591 + t14909;
  t14737 = Power(t10869,2);
  t14739 = 0.11*t14737;
  t14740 = Power(t10827,2);
  t14741 = 0.11*t14740;
  t14742 = t14739 + t14741;
  t14743 = -6.8*t14172*t14742;
  t14785 = -1.*t14784*t11630;
  t14799 = -1.*t11174*t14798;
  t14800 = t14785 + t14799;
  t14803 = t14784*t14252;
  t14804 = t11630*t14798;
  t14805 = t14803 + t14804;
  t14926 = -1.*t14212*t10827;
  t14927 = -0.24*t10869*t10911;
  t14928 = t14926 + t14927;
  t14902 = 0.384*var2[6]*t14901;
  t14903 = -3.2*t14242*t14593;
  t14904 = -3.2*t14276*t14901;
  t14907 = -6.4*t14593*t14598;
  t14908 = -6.4*t14654*t14645;
  t14911 = -6.4*t14593*t14910;
  t14912 = -6.4*t14654*t14901;
  t14915 = -6.4*t14598*t14654;
  t14916 = -3.2*t14678*t14645;
  t14917 = -3.2*t14593*t14684;
  t14918 = -6.4*t14654*t14910;
  t14919 = -3.2*t14678*t14901;
  t14920 = t6860*t14899;
  t14921 = t14653 + t14920;
  t14922 = -3.2*t14593*t14921;
  t14925 = -3.2*t14593*t14800;
  t14930 = t14784*t11630;
  t14931 = t11174*t14798;
  t14935 = -3.2*t14805*t14901;
  t14960 = -0.24*t10586*t10827;
  t14961 = t14960 + t14927;
  t14937 = -1.*t11174*t14784;
  t14963 = 0.24*t10869*t10586;
  t14964 = t14963 + t14797;
  t14939 = -1.*t14798*t14899;
  t14976 = -6.8*t14291;
  t14977 = -6.8*t14290*t8299;
  t14978 = Power(t14332,2);
  t14979 = -6.8*t14978;
  t14980 = -6.8*t14332*t14335;
  t14981 = -3.2*t14509*t14666;
  t14982 = Power(t14542,2);
  t14983 = -3.2*t14982;
  t14984 = Power(t14554,2);
  t14985 = -3.2*t14984;
  t14986 = -3.2*t14546*t14669;
  t14987 = -6.8*t14571;
  t14988 = -6.8*t14570*t14172;
  t14989 = Power(t14582,2);
  t14990 = -6.8*t14989;
  t14991 = -6.8*t14582*t14586;
  t14992 = -3.2*t14593*t14678;
  t14993 = Power(t14598,2);
  t14994 = -3.2*t14993;
  t14995 = Power(t14654,2);
  t14996 = -3.2*t14995;
  t14997 = -3.2*t14645*t14684;
  t14998 = t14976 + t14977 + t14979 + t14980 + t14981 + t14983 + t14985 + t14986 + t14987 + t14988 + t14990 + t14991 + t14992 + t14994 + t14996 + t14997;
  t15023 = 2.88*t995;
  t15024 = -6.8*t14335*t14701;
  t15025 = -3.2*t14546*t14730;
  t15026 = -3.2*t14509*t14735;
  t15027 = -6.8*t14586*t14742;
  t15028 = -3.2*t14645*t14800;
  t15029 = -3.2*t14593*t14805;
  t15030 = t15023 + t15024 + t15025 + t15026 + t15027 + t15028 + t15029;
  t15001 = -0.748*t14335;
  t15002 = -3.2*t10257*t14509;
  t15003 = -3.2*t8461*t14546;
  t15004 = t15001 + t15002 + t15003;
  t15007 = -0.748*t14586;
  t15008 = -3.2*t14276*t14593;
  t15009 = -3.2*t14242*t14645;
  t15010 = t15007 + t15008 + t15009;
  t14819 = t8344 + t14817 + t14818;
  t14820 = -0.5*var2[3]*t14819;
  t14830 = t14307 + t14311 + t14494 + t14500 + t14821 + t14822 + t14825 + t14829;
  t14831 = -0.5*var2[1]*t14830;
  t14844 = t14659 + t14660 + t14661 + t14662 + t14833 + t14837 + t14838 + t14839 + t14840 + t14843;
  t14845 = -0.5*var2[0]*t14844;
  t14850 = t14849*t8194;
  t14853 = t9260*t14727;
  t14854 = t14850 + t14851 + t14852 + t14853;
  t14855 = -3.2*t14509*t14854;
  t14857 = -1.*t5651*t14849;
  t14859 = -1.*t8194*t14727;
  t14861 = t14857 + t14858 + t14859 + t14860;
  t14862 = -3.2*t14546*t14861;
  t14863 = t14708 + t14846 + t14855 + t14856 + t14862;
  t14864 = -0.5*var2[2]*t14863;
  t14865 = t14816 + t14820 + t14831 + t14845 + t14864;
  t14866 = var2[1]*t14865;
  t15038 = t14668 + t14814;
  t15066 = -1.*t2142*t8363;
  t15067 = 0.24*t2051*t2164;
  t15068 = t15066 + t15067;
  t15039 = 0.384*var2[4]*t15038;
  t14871 = Power(t2034,2);
  t14872 = -0.24*t14871;
  t14873 = t10137 + t14872;
  t15040 = -3.2*t8461*t14824;
  t14867 = -1.*t8363*t2164;
  t14868 = 0.24*t2034*t2164;
  t14869 = t14867 + t14868;
  t15041 = -3.2*t10257*t15038;
  t15044 = -6.4*t14984;
  t15045 = -6.4*t14542*t14824;
  t15046 = Power(t14824,2);
  t15047 = -6.4*t15046;
  t15048 = -6.4*t14554*t15038;
  t15051 = -6.4*t14666*t14554;
  t15052 = -3.2*t14669*t14824;
  t15053 = t9525 + t14823;
  t15054 = -3.2*t14554*t15053;
  t15055 = -3.2*t14666*t15038;
  t15056 = -3.2*t14542*t14842;
  t15057 = -6.4*t14824*t14842;
  t15060 = -3.2*t14730*t14824;
  t14883 = t14882*t8194;
  t14886 = t9260*t14885;
  t14887 = t14883 + t14851 + t14852 + t14886;
  t15062 = -3.2*t14735*t15038;
  t15065 = -1.*t9260*t14727;
  t15071 = -1.*t14717*t14813;
  t14889 = -1.*t5651*t14882;
  t14890 = -1.*t8194*t14885;
  t14891 = t14889 + t14858 + t14890 + t14860;
  t15076 = t5651*t14717;
  t15099 = -0.24*t2142*t2034;
  t15100 = t15099 + t15067;
  t15080 = t14727*t14813;
  t15012 = -13.6*t14290*t14332;
  t15013 = -13.6*t14290*t14335;
  t15119 = -3.2*t14666*t14542;
  t15120 = -3.2*t14554*t14669;
  t15121 = -3.2*t14666*t14824;
  t15122 = -3.2*t14554*t14842;
  t15123 = t14976 + t14977 + t14979 + t14980 + t15119 + t15120 + t15121 + t15122;
  t15133 = -3.2*t14554*t14730;
  t15134 = -3.2*t14554*t14854;
  t15135 = -3.2*t14735*t14824;
  t15136 = -3.2*t14542*t14861;
  t15137 = t15024 + t15133 + t15134 + t15135 + t15136;
  t15126 = -3.2*t8461*t14554;
  t15127 = -3.2*t10257*t14824;
  t15128 = t15001 + t15126 + t15127;
  t14870 = -3.2*t14869*t14509;
  t14874 = -3.2*t14873*t14546;
  t14875 = t14817 + t14870 + t14874 + t14818;
  t14876 = -0.5*var2[3]*t14875;
  t14877 = t14821 + t14822 + t14825 + t14829;
  t14878 = -0.5*var2[1]*t14877;
  t14879 = t14833 + t14837 + t14838 + t14839 + t14840 + t14843;
  t14880 = -0.5*var2[0]*t14879;
  t14888 = -3.2*t14509*t14887;
  t14892 = -3.2*t14546*t14891;
  t14893 = t14846 + t14888 + t14856 + t14892;
  t14894 = -0.5*var2[2]*t14893;
  t14895 = t14816 + t14876 + t14878 + t14880 + t14894;
  t14896 = var2[1]*t14895;
  t15087 = -3.2*t14873*t14554;
  t15088 = -3.2*t14869*t14824;
  t15089 = t15087 + t15040 + t15088 + t15041;
  t15090 = -0.5*var2[3]*t15089;
  t15091 = t15044 + t15045 + t15047 + t15048;
  t15092 = -0.5*var2[1]*t15091;
  t15093 = t15051 + t15052 + t15054 + t15055 + t15056 + t15057;
  t15094 = -0.5*var2[0]*t15093;
  t15095 = -3.2*t14854*t14824;
  t15096 = -3.2*t14887*t14824;
  t15097 = -1.*t14882*t8194;
  t15098 = -1.*t5651*t14885;
  t15101 = -1.*t5651*t15100;
  t15102 = -1.*t14849*t14813;
  t15103 = -1.*t14882*t14813;
  t15104 = t15097 + t14728 + t15065 + t15098 + t15101 + t15102 + t15103 + t15071;
  t15105 = -3.2*t14542*t15104;
  t15106 = -3.2*t14554*t14861;
  t15107 = -3.2*t14554*t14891;
  t15108 = t5651*t14849;
  t15109 = t5651*t14882;
  t15110 = t14882*t9260;
  t15111 = t8194*t14885;
  t15112 = t8194*t15100;
  t15113 = t15108 + t15109 + t15076 + t15110 + t14733 + t15111 + t15112 + t15080;
  t15114 = -3.2*t14554*t15113;
  t15115 = t15060 + t15095 + t15096 + t15062 + t15105 + t15106 + t15107 + t15114;
  t15116 = -0.5*var2[2]*t15115;
  t15117 = t15039 + t15090 + t15092 + t15094 + t15116;
  t15118 = var2[1]*t15117;
  t15125 = 0.384*var2[4]*t14824;
  t15166 = t15119 + t15120 + t15121 + t15122;
  t15175 = -3.2*t14554*t14887;
  t15176 = -3.2*t14542*t14891;
  t15177 = t15133 + t15175 + t15135 + t15176;
  t15168 = -3.2*t14873*t14542;
  t15169 = -3.2*t14869*t14554;
  t15170 = t15168 + t15126 + t15169 + t15127;
  t15142 = 0.384*var2[1]*t14824;
  t14905 = t14173 + t14903 + t14904;
  t14906 = -0.5*var2[5]*t14905;
  t14913 = t14574 + t14575 + t14587 + t14590 + t14907 + t14908 + t14911 + t14912;
  t14914 = -0.5*var2[1]*t14913;
  t14923 = t14671 + t14672 + t14673 + t14674 + t14915 + t14916 + t14917 + t14918 + t14919 + t14922;
  t14924 = -0.5*var2[0]*t14923;
  t14929 = t14928*t11630;
  t14932 = t14252*t14798;
  t14933 = t14929 + t14930 + t14931 + t14932;
  t14934 = -3.2*t14593*t14933;
  t14936 = -1.*t11174*t14928;
  t14938 = -1.*t11630*t14798;
  t14940 = t14936 + t14937 + t14938 + t14939;
  t14941 = -3.2*t14645*t14940;
  t14942 = t14743 + t14925 + t14934 + t14935 + t14941;
  t14943 = -0.5*var2[2]*t14942;
  t14944 = t14902 + t14906 + t14914 + t14924 + t14943;
  t14945 = var2[1]*t14944;
  t15182 = t14683 + t14900;
  t15210 = -1.*t10869*t14212;
  t15211 = 0.24*t10827*t10911;
  t15212 = t15210 + t15211;
  t15183 = 0.384*var2[6]*t15182;
  t14950 = Power(t10586,2);
  t14951 = -0.24*t14950;
  t14952 = t14271 + t14951;
  t15184 = -3.2*t14242*t14910;
  t14946 = -1.*t14212*t10911;
  t14947 = 0.24*t10586*t10911;
  t14948 = t14946 + t14947;
  t15185 = -3.2*t14276*t15182;
  t15188 = -6.4*t14995;
  t15189 = -6.4*t14598*t14910;
  t15190 = Power(t14910,2);
  t15191 = -6.4*t15190;
  t15192 = -6.4*t14654*t15182;
  t15195 = -6.4*t14678*t14654;
  t15196 = -3.2*t14684*t14910;
  t15197 = t14257 + t14909;
  t15198 = -3.2*t14654*t15197;
  t15199 = -3.2*t14678*t15182;
  t15200 = -3.2*t14598*t14921;
  t15201 = -6.4*t14910*t14921;
  t15204 = -3.2*t14800*t14910;
  t14962 = t14961*t11630;
  t14965 = t14252*t14964;
  t14966 = t14962 + t14930 + t14931 + t14965;
  t15206 = -3.2*t14805*t15182;
  t15209 = -1.*t14252*t14798;
  t15215 = -1.*t14784*t14899;
  t14968 = -1.*t11174*t14961;
  t14969 = -1.*t11630*t14964;
  t14970 = t14968 + t14937 + t14969 + t14939;
  t15220 = t11174*t14784;
  t15243 = -0.24*t10869*t10586;
  t15244 = t15243 + t15211;
  t15224 = t14798*t14899;
  t15016 = -13.6*t14570*t14582;
  t15017 = -13.6*t14570*t14586;
  t15263 = -3.2*t14678*t14598;
  t15264 = -3.2*t14654*t14684;
  t15265 = -3.2*t14678*t14910;
  t15266 = -3.2*t14654*t14921;
  t15267 = t14987 + t14988 + t14990 + t14991 + t15263 + t15264 + t15265 + t15266;
  t15277 = -3.2*t14654*t14800;
  t15278 = -3.2*t14654*t14933;
  t15279 = -3.2*t14805*t14910;
  t15280 = -3.2*t14598*t14940;
  t15281 = t15027 + t15277 + t15278 + t15279 + t15280;
  t15270 = -3.2*t14242*t14654;
  t15271 = -3.2*t14276*t14910;
  t15272 = t15007 + t15270 + t15271;
  t14949 = -3.2*t14948*t14593;
  t14953 = -3.2*t14952*t14645;
  t14954 = t14903 + t14949 + t14953 + t14904;
  t14955 = -0.5*var2[5]*t14954;
  t14956 = t14907 + t14908 + t14911 + t14912;
  t14957 = -0.5*var2[1]*t14956;
  t14958 = t14915 + t14916 + t14917 + t14918 + t14919 + t14922;
  t14959 = -0.5*var2[0]*t14958;
  t14967 = -3.2*t14593*t14966;
  t14971 = -3.2*t14645*t14970;
  t14972 = t14925 + t14967 + t14935 + t14971;
  t14973 = -0.5*var2[2]*t14972;
  t14974 = t14902 + t14955 + t14957 + t14959 + t14973;
  t14975 = var2[1]*t14974;
  t15231 = -3.2*t14952*t14654;
  t15232 = -3.2*t14948*t14910;
  t15233 = t15231 + t15184 + t15232 + t15185;
  t15234 = -0.5*var2[5]*t15233;
  t15235 = t15188 + t15189 + t15191 + t15192;
  t15236 = -0.5*var2[1]*t15235;
  t15237 = t15195 + t15196 + t15198 + t15199 + t15200 + t15201;
  t15238 = -0.5*var2[0]*t15237;
  t15239 = -3.2*t14933*t14910;
  t15240 = -3.2*t14966*t14910;
  t15241 = -1.*t14961*t11630;
  t15242 = -1.*t11174*t14964;
  t15245 = -1.*t11174*t15244;
  t15246 = -1.*t14928*t14899;
  t15247 = -1.*t14961*t14899;
  t15248 = t15241 + t14799 + t15209 + t15242 + t15245 + t15246 + t15247 + t15215;
  t15249 = -3.2*t14598*t15248;
  t15250 = -3.2*t14654*t14940;
  t15251 = -3.2*t14654*t14970;
  t15252 = t11174*t14928;
  t15253 = t11174*t14961;
  t15254 = t14961*t14252;
  t15255 = t11630*t14964;
  t15256 = t11630*t15244;
  t15257 = t15252 + t15253 + t15220 + t15254 + t14804 + t15255 + t15256 + t15224;
  t15258 = -3.2*t14654*t15257;
  t15259 = t15204 + t15239 + t15240 + t15206 + t15249 + t15250 + t15251 + t15258;
  t15260 = -0.5*var2[2]*t15259;
  t15261 = t15183 + t15234 + t15236 + t15238 + t15260;
  t15262 = var2[1]*t15261;
  t15269 = 0.384*var2[6]*t14910;
  t15310 = t15263 + t15264 + t15265 + t15266;
  t15319 = -3.2*t14654*t14966;
  t15320 = -3.2*t14598*t14970;
  t15321 = t15277 + t15319 + t15279 + t15320;
  t15312 = -3.2*t14952*t14598;
  t15313 = -3.2*t14948*t14654;
  t15314 = t15312 + t15270 + t15313 + t15271;
  t15286 = 0.384*var2[1]*t14910;
  p_output1[0]=var2[1]*(-0.5*(-9.6*t14542*t14546 - 9.6*t14509*t14554 - 9.6*t14598*t14645 - 9.6*t14593*t14654 + t14659 + t14660 + t14661 + t14662 - 3.2*t10111*t14669 + t14671 + t14672 + t14673 + t14674 - 3.2*t14046*t14678 - 3.2*t14261*t14684 - 3.2*t14666*t8248)*var2[0] - 0.5*(t14307 + t14311 + t14494 + t14500 - 6.4*Power(t14509,2) - 6.4*t10111*t14542 - 6.4*Power(t14546,2) + t14574 + t14575 + t14587 + t14590 - 6.4*Power(t14593,2) - 6.4*t14261*t14598 - 6.4*Power(t14645,2) - 6.4*t14046*t14654 - 6.4*t14554*t8248)*var2[1] - 0.5*(t14708 - 3.2*t10111*t14730 + t14743 - 3.2*t14261*t14800 - 3.2*t14046*t14805 - 2.88*t6860 - 3.2*t14735*t8248)*var2[2] - 0.5*(-3.2*t10257*t8248 + t8344 - 3.2*t10111*t8461)*var2[3] + 0.384*t8248*var2[4] - 0.5*(t14173 - 3.2*t14242*t14261 - 3.2*t14046*t14276)*var2[5] + 0.384*t14046*var2[6]);
  p_output1[1]=t14866;
  p_output1[2]=t14896;
  p_output1[3]=t14945;
  p_output1[4]=t14975;
  p_output1[5]=-0.5*t14998*var2[1];
  p_output1[6]=-0.5*t14998*var2[0] - 1.*(-6.4*t14542*t14546 - 6.4*t14509*t14554 - 6.4*t14598*t14645 - 6.4*t14593*t14654 + t15012 + t15013 + t15016 + t15017)*var2[1] - 0.5*t15030*var2[2] - 0.5*t15004*var2[3] + 0.384*t14509*var2[4] - 0.5*t15010*var2[5] + 0.384*t14593*var2[6];
  p_output1[7]=-0.5*t15030*var2[1];
  p_output1[8]=-0.5*t15004*var2[1];
  p_output1[9]=0.384*t14509*var2[1];
  p_output1[10]=-0.5*t15010*var2[1];
  p_output1[11]=0.384*t14593*var2[1];
  p_output1[12]=t14866;
  p_output1[13]=var2[1]*(t15039 - 0.5*(t14659 + t14660 + t14661 + t14662 + t15051 + t15052 + t15054 + t15055 + t15056 + t15057)*var2[0] - 0.5*(t14307 + t14311 + t14494 + t14500 + t15044 + t15045 + t15047 + t15048)*var2[1] - 0.5*(t14708 - 6.4*t14824*t14854 - 6.4*t14554*t14861 + t15060 + t15062 - 3.2*t14542*(-2.*t14813*t14849 + t15065 + t15071 - 2.*t14727*t5651 - 1.*t15068*t5651 - 1.*t14849*t8194) - 3.2*t14554*(t15076 + t15080 + 2.*t14849*t5651 + 2.*t14727*t8194 + t15068*t8194 + t14849*t9260))*var2[2] - 0.5*(t15040 + t15041 + t8344)*var2[3]);
  p_output1[14]=t15118;
  p_output1[15]=-0.5*t15123*var2[1];
  p_output1[16]=t15125 - 0.5*t15123*var2[0] - 1.*(t14833 + t14839 + t15012 + t15013)*var2[1] - 0.5*t15137*var2[2] - 0.5*t15128*var2[3];
  p_output1[17]=-0.5*t15137*var2[1];
  p_output1[18]=-0.5*t15128*var2[1];
  p_output1[19]=t15142;
  p_output1[20]=t14896;
  p_output1[21]=t15118;
  p_output1[22]=var2[1]*(t15039 + t15092 + t15094 - 0.5*(-6.4*t14824*t14887 - 6.4*t14554*t14891 + t15060 + t15062 - 3.2*t14542*(-2.*t14813*t14882 + t15065 + t15071 + t15097 + t15101 - 2.*t14885*t5651) - 3.2*t14554*(t15076 + t15080 + t15110 + t15112 + 2.*t14882*t5651 + 2.*t14885*t8194))*var2[2] - 0.5*(-3.2*t14542*t14869 - 6.4*t14824*t14869 - 6.4*t14554*t14873 + t15040 + t15041 - 3.2*t14554*(0.24*t14871 - 1.*t2034*t8363))*var2[3]);
  p_output1[23]=-0.5*t15166*var2[1];
  p_output1[24]=t15125 - 0.5*t15166*var2[0] - 1.*(t14833 + t14839)*var2[1] - 0.5*t15177*var2[2] - 0.5*t15170*var2[3];
  p_output1[25]=-0.5*t15177*var2[1];
  p_output1[26]=-0.5*t15170*var2[1];
  p_output1[27]=t15142;
  p_output1[28]=t14945;
  p_output1[29]=var2[1]*(t15183 - 0.5*(t14671 + t14672 + t14673 + t14674 + t15195 + t15196 + t15198 + t15199 + t15200 + t15201)*var2[0] - 0.5*(t14574 + t14575 + t14587 + t14590 + t15188 + t15189 + t15191 + t15192)*var2[1] - 0.5*(t14743 - 6.4*t14910*t14933 - 6.4*t14654*t14940 + t15204 + t15206 - 3.2*t14598*(-2.*t11174*t14798 - 1.*t11630*t14928 - 2.*t14899*t14928 + t15209 - 1.*t11174*t15212 + t15215) - 3.2*t14654*(2.*t11630*t14798 + 2.*t11174*t14928 + t14252*t14928 + t11630*t15212 + t15220 + t15224))*var2[2] - 0.5*(t14173 + t15184 + t15185)*var2[5]);
  p_output1[30]=t15262;
  p_output1[31]=-0.5*t15267*var2[1];
  p_output1[32]=t15269 - 0.5*t15267*var2[0] - 1.*(t14915 + t14918 + t15016 + t15017)*var2[1] - 0.5*t15281*var2[2] - 0.5*t15272*var2[5];
  p_output1[33]=-0.5*t15281*var2[1];
  p_output1[34]=-0.5*t15272*var2[1];
  p_output1[35]=t15286;
  p_output1[36]=t14975;
  p_output1[37]=t15262;
  p_output1[38]=var2[1]*(t15183 + t15236 + t15238 - 0.5*(-6.4*t14910*t14966 - 6.4*t14654*t14970 + t15204 + t15206 - 3.2*t14598*(-2.*t14899*t14961 - 2.*t11174*t14964 + t15209 + t15215 + t15241 + t15245) - 3.2*t14654*(2.*t11174*t14961 + 2.*t11630*t14964 + t15220 + t15224 + t15254 + t15256))*var2[2] - 0.5*(-3.2*t14598*t14948 - 6.4*t14910*t14948 - 3.2*t14654*(-1.*t10586*t14212 + 0.24*t14950) - 6.4*t14654*t14952 + t15184 + t15185)*var2[5]);
  p_output1[39]=-0.5*t15310*var2[1];
  p_output1[40]=t15269 - 0.5*t15310*var2[0] - 1.*(t14915 + t14918)*var2[1] - 0.5*t15321*var2[2] - 0.5*t15314*var2[5];
  p_output1[41]=-0.5*t15321*var2[1];
  p_output1[42]=-0.5*t15314*var2[1];
  p_output1[43]=t15286;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace Times[step, Pattern[Rabbit, Blank[]]]
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
