/*
 * Automatically Generated from Mathematica.
 * Tue 17 Sep 2019 23:17:10 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2115;
  double t231;
  double t325;
  double t2125;
  double t172;
  double t5652;
  double t5686;
  double t5713;
  double t5774;
  double t5824;
  double t2099;
  double t2214;
  double t2698;
  double t5923;
  double t5955;
  double t5964;
  double t2699;
  double t5922;
  double t6534;
  double t6617;
  double t6618;
  double t6807;
  double t6825;
  double t6853;
  double t6944;
  double t6972;
  double t6981;
  double t7041;
  double t7045;
  double t7103;
  double t5965;
  double t6360;
  double t6481;
  double t6619;
  double t6680;
  double t6737;
  double t6804;
  double t6805;
  double t6862;
  double t6879;
  double t6903;
  double t6918;
  double t6921;
  double t6923;
  double t6982;
  double t7025;
  double t7026;
  double t7030;
  double t7033;
  double t7036;
  double t7158;
  double t7177;
  double t8154;
  double t8262;
  double t8287;
  double t8352;
  double t8756;
  double t8757;
  double t8759;
  double t8760;
  double t8761;
  double t8774;
  double t8779;
  double t8783;
  double t8801;
  double t8803;
  double t8802;
  double t8804;
  double t8805;
  double t8823;
  double t8824;
  double t8825;
  double t8835;
  double t8840;
  double t8841;
  double t9209;
  double t9465;
  double t8834;
  double t8838;
  double t9210;
  double t9278;
  double t9463;
  double t9467;
  double t9766;
  double t9954;
  double t9955;
  double t8806;
  double t9989;
  double t9991;
  double t10003;
  double t8762;
  double t8763;
  double t8764;
  double t8770;
  double t8771;
  double t8773;
  double t8794;
  double t8795;
  double t8796;
  double t8797;
  double t8799;
  double t8800;
  double t9981;
  double t9986;
  double t10007;
  double t10012;
  double t10013;
  double t10057;
  double t10064;
  double t10067;
  double t8404;
  double t10156;
  double t10157;
  double t10160;
  double t10161;
  double t10166;
  double t10169;
  double t10170;
  double t10185;
  double t6924;
  double t10191;
  double t10192;
  double t10130;
  double t10237;
  double t10255;
  double t10269;
  double t10304;
  double t10333;
  double t11172;
  double t11176;
  double t11181;
  double t10068;
  double t11191;
  double t11194;
  double t11234;
  double t11235;
  double t11247;
  double t11248;
  double t11259;
  double t11260;
  double t11271;
  double t11273;
  double t11256;
  double t11258;
  double t11262;
  double t11263;
  double t11267;
  double t11252;
  double t11238;
  double t11277;
  double t11274;
  double t8729;
  double t8730;
  double t8428;
  double t8429;
  double t11339;
  double t11340;
  double t11349;
  double t11353;
  double t11359;
  double t11360;
  double t11364;
  double t11365;
  double t11367;
  double t11375;
  double t11378;
  double t11379;
  double t11382;
  double t8826;
  double t8832;
  double t9699;
  double t9718;
  double t11427;
  double t11417;
  double t11418;
  double t11419;
  double t11420;
  double t11449;
  double t11450;
  double t11453;
  double t11457;
  double t11458;
  double t11463;
  double t11464;
  double t11465;
  double t11386;
  double t11492;
  double t11495;
  double t11498;
  double t11506;
  double t11507;
  double t11512;
  double t11369;
  double t11513;
  double t11514;
  double t11478;
  double t11524;
  double t11533;
  double t11541;
  double t11545;
  double t11550;
  double t11552;
  double t11466;
  double t11557;
  double t11558;
  double t11581;
  double t11582;
  double t11586;
  double t11587;
  double t11592;
  double t11598;
  double t11599;
  double t11603;
  double t8715;
  double t8718;
  double t9406;
  double t9615;
  double t11616;
  double t11619;
  double t11620;
  double t11621;
  double t11639;
  double t11640;
  double t11641;
  double t11644;
  double t11606;
  double t11610;
  double t11611;
  double t11615;
  double t11627;
  double t11628;
  double t11632;
  double t11633;
  double t11634;
  double t11604;
  double t11590;
  double t11647;
  double t11645;
  double t11669;
  double t11670;
  double t11671;
  double t11672;
  double t11673;
  double t11677;
  double t11678;
  double t11679;
  double t11681;
  double t11682;
  double t11683;
  double t11692;
  double t11693;
  double t11694;
  double t11680;
  double t11684;
  double t11685;
  double t11691;
  double t11696;
  double t11697;
  double t11701;
  double t11702;
  double t11703;
  double t11704;
  double t11725;
  double t11726;
  double t11706;
  double t11728;
  double t11729;
  double t11708;
  double t11658;
  double t11659;
  double t11665;
  double t11666;
  double t11667;
  double t11668;
  double t11750;
  double t11753;
  double t11754;
  double t11755;
  double t11756;
  double t11757;
  double t11758;
  double t11759;
  double t11761;
  double t11762;
  double t11763;
  double t11742;
  double t11743;
  double t11744;
  double t11747;
  double t11748;
  double t11749;
  double t11760;
  double t11764;
  double t11765;
  double t11767;
  double t11768;
  double t11769;
  double t11774;
  double t11775;
  double t11776;
  double t11773;
  double t11780;
  double t11781;
  double t11787;
  double t11796;
  double t11797;
  double t11789;
  double t11799;
  double t11800;
  double t11791;
  double t11695;
  double t11698;
  double t11699;
  double t11700;
  double t11705;
  double t11707;
  double t11709;
  double t11710;
  double t11711;
  double t11819;
  double t11820;
  double t11821;
  double t11813;
  double t11814;
  double t11727;
  double t11730;
  double t11731;
  double t11818;
  double t11824;
  double t11733;
  double t11734;
  double t11735;
  double t11829;
  double t11842;
  double t11843;
  double t11833;
  double t11732;
  double t11736;
  double t11737;
  double t11838;
  double t11839;
  double t11840;
  double t11841;
  double t11844;
  double t11845;
  double t11846;
  double t11847;
  double t11848;
  double t11849;
  double t11850;
  double t11851;
  double t11852;
  double t11853;
  double t11854;
  double t11855;
  double t11856;
  double t11857;
  double t11858;
  double t11777;
  double t11782;
  double t11783;
  double t11786;
  double t11788;
  double t11790;
  double t11792;
  double t11793;
  double t11794;
  double t11885;
  double t11886;
  double t11887;
  double t11879;
  double t11880;
  double t11798;
  double t11801;
  double t11802;
  double t11884;
  double t11890;
  double t11804;
  double t11805;
  double t11806;
  double t11895;
  double t11908;
  double t11909;
  double t11899;
  double t11803;
  double t11807;
  double t11808;
  double t11904;
  double t11905;
  double t11906;
  double t11907;
  double t11910;
  double t11911;
  double t11912;
  double t11913;
  double t11914;
  double t11915;
  double t11916;
  double t11917;
  double t11918;
  double t11919;
  double t11920;
  double t11921;
  double t11922;
  double t11923;
  double t11924;
  double t11945;
  double t11947;
  double t11944;
  double t11958;
  double t11963;
  double t11965;
  double t11955;
  double t11956;
  double t11957;
  double t11959;
  double t11960;
  double t11961;
  double t11946;
  double t11948;
  double t11949;
  double t11951;
  double t11952;
  double t11953;
  double t11964;
  double t11966;
  double t11967;
  double t11969;
  double t11970;
  double t11971;
  double t11979;
  double t11985;
  double t11986;
  double t11987;
  double t11980;
  double t11981;
  double t11982;
  double t11983;
  double t11991;
  double t11992;
  double t11993;
  double t11995;
  double t11996;
  double t11997;
  double t12008;
  double t12009;
  double t11999;
  double t12000;
  double t12001;
  double t11998;
  double t12002;
  double t12003;
  double t12012;
  double t12013;
  double t12014;
  double t12031;
  double t12036;
  double t12037;
  double t12032;
  double t12033;
  double t12034;
  double t12038;
  double t12040;
  double t12041;
  double t12042;
  double t12053;
  double t12054;
  double t12055;
  double t12056;
  double t12057;
  double t12063;
  double t12064;
  double t12070;
  double t12071;
  double t12072;
  double t12065;
  double t12066;
  double t12067;
  double t12068;
  double t12076;
  double t12077;
  double t12078;
  double t12080;
  double t12081;
  double t12082;
  double t12093;
  double t12094;
  double t12084;
  double t12085;
  double t12086;
  double t12083;
  double t12087;
  double t12088;
  double t12097;
  double t12098;
  double t12099;
  double t12116;
  double t12121;
  double t12122;
  double t12117;
  double t12118;
  double t12119;
  double t12123;
  double t12125;
  double t12126;
  double t12127;
  double t12138;
  double t12139;
  double t12140;
  double t12141;
  double t12142;
  double t12148;
  t2115 = Cos(var1[3]);
  t231 = Cos(var1[4]);
  t325 = Sin(var1[3]);
  t2125 = Sin(var1[4]);
  t172 = Sin(var1[2]);
  t5652 = Cos(var1[2]);
  t5686 = t2115*t231;
  t5713 = -1.*t325*t2125;
  t5774 = t5686 + t5713;
  t5824 = t5652*t5774;
  t2099 = -1.*t231*t325;
  t2214 = -1.*t2115*t2125;
  t2698 = t2099 + t2214;
  t5923 = t231*t325;
  t5955 = t2115*t2125;
  t5964 = t5923 + t5955;
  t2699 = t172*t2698;
  t5922 = t2699 + t5824;
  t6534 = t5652*t2698;
  t6617 = -1.*t172*t5774;
  t6618 = t6534 + t6617;
  t6807 = -1.*t2115*t231;
  t6825 = t325*t2125;
  t6853 = t6807 + t6825;
  t6944 = -1.*t2115*t172;
  t6972 = -1.*t5652*t325;
  t6981 = t6944 + t6972;
  t7041 = t5652*t2115;
  t7045 = -1.*t172*t325;
  t7103 = t7041 + t7045;
  t5965 = -1.*t172*t5964;
  t6360 = t5965 + t5824;
  t6481 = 6.4*t5922*t6360;
  t6619 = t5652*t5964;
  t6680 = t172*t5774;
  t6737 = t6619 + t6680;
  t6804 = 6.4*t6618*t6737;
  t6805 = -1.*t172*t2698;
  t6862 = t5652*t6853;
  t6879 = t6805 + t6862;
  t6903 = 6.4*t5922*t6879;
  t6918 = t172*t6853;
  t6921 = t6534 + t6918;
  t6923 = 6.4*t6618*t6921;
  t6982 = Power(t6981,2);
  t7025 = 13.6*t6982;
  t7026 = t2115*t172;
  t7030 = t5652*t325;
  t7033 = t7026 + t7030;
  t7036 = 13.6*t6981*t7033;
  t7158 = Power(t7103,2);
  t7177 = 13.6*t7158;
  t8154 = -1.*t5652*t2115;
  t8262 = t172*t325;
  t8287 = t8154 + t8262;
  t8352 = 13.6*t7103*t8287;
  t8756 = Cos(var1[5]);
  t8757 = -1.*t8756*t172;
  t8759 = Sin(var1[5]);
  t8760 = -1.*t5652*t8759;
  t8761 = t8757 + t8760;
  t8774 = t5652*t8756;
  t8779 = -1.*t172*t8759;
  t8783 = t8774 + t8779;
  t8801 = Cos(var1[6]);
  t8803 = Sin(var1[6]);
  t8802 = -1.*t8801*t8759;
  t8804 = -1.*t8756*t8803;
  t8805 = t8802 + t8804;
  t8823 = t8756*t8801;
  t8824 = -1.*t8759*t8803;
  t8825 = t8823 + t8824;
  t8835 = t5652*t8825;
  t8840 = t8801*t8759;
  t8841 = t8756*t8803;
  t9209 = t8840 + t8841;
  t9465 = -1.*t172*t8825;
  t8834 = t172*t8805;
  t8838 = t8834 + t8835;
  t9210 = -1.*t172*t9209;
  t9278 = t9210 + t8835;
  t9463 = t5652*t8805;
  t9467 = t9463 + t9465;
  t9766 = t5652*t9209;
  t9954 = t172*t8825;
  t9955 = t9766 + t9954;
  t8806 = -1.*t172*t8805;
  t9989 = -1.*t8756*t8801;
  t9991 = t8759*t8803;
  t10003 = t9989 + t9991;
  t8762 = Power(t8761,2);
  t8763 = 13.6*t8762;
  t8764 = t8756*t172;
  t8770 = t5652*t8759;
  t8771 = t8764 + t8770;
  t8773 = 13.6*t8761*t8771;
  t8794 = Power(t8783,2);
  t8795 = 13.6*t8794;
  t8796 = -1.*t5652*t8756;
  t8797 = t172*t8759;
  t8799 = t8796 + t8797;
  t8800 = 13.6*t8783*t8799;
  t9981 = 6.4*t8838*t9278;
  t9986 = 6.4*t9467*t9955;
  t10007 = t5652*t10003;
  t10012 = t8806 + t10007;
  t10013 = 6.4*t8838*t10012;
  t10057 = t172*t10003;
  t10064 = t9463 + t10057;
  t10067 = 6.4*t9467*t10064;
  t8404 = t7025 + t7036 + t7177 + t8352 + t6481 + t6804 + t6903 + t6923;
  t10156 = Power(t5922,2);
  t10157 = 6.4*t10156;
  t10160 = t172*t5964;
  t10161 = t10160 + t6862;
  t10166 = 6.4*t5922*t10161;
  t10169 = 6.4*t6737*t6921;
  t10170 = Power(t6921,2);
  t10185 = 6.4*t10170;
  t6924 = t6481 + t6804 + t6903 + t6923;
  t10191 = t10157 + t10166 + t10169 + t10185;
  t10192 = -0.5*var2[4]*t10191;
  t10130 = t8763 + t8773 + t8795 + t8800 + t9981 + t9986 + t10013 + t10067;
  t10237 = Power(t8838,2);
  t10255 = 6.4*t10237;
  t10269 = t172*t9209;
  t10304 = t10269 + t10007;
  t10333 = 6.4*t8838*t10304;
  t11172 = 6.4*t9955*t10064;
  t11176 = Power(t10064,2);
  t11181 = 6.4*t11176;
  t10068 = t9981 + t9986 + t10013 + t10067;
  t11191 = t10255 + t10333 + t11172 + t11181;
  t11194 = -0.5*var2[6]*t11191;
  t11234 = 6.4*t5922*t6737;
  t11235 = 6.4*t5922*t6921;
  t11247 = 13.6*t6981*t7103;
  t11248 = 13.6*t7033*t7103;
  t11259 = 13.6*t8761*t8783;
  t11260 = 13.6*t8771*t8783;
  t11271 = 6.4*t8838*t9955;
  t11273 = 6.4*t8838*t10064;
  t11256 = 6.4*t5922*t6618;
  t11258 = 6.4*t6360*t6737;
  t11262 = 6.4*t8838*t9467;
  t11263 = 6.4*t9278*t9955;
  t11267 = t11247 + t11248 + t11256 + t11258 + t11259 + t11260 + t11262 + t11263;
  t11252 = t11247 + t11248 + t11234 + t11235;
  t11238 = t11234 + t11235;
  t11277 = t11259 + t11260 + t11271 + t11273;
  t11274 = t11271 + t11273;
  t8729 = -1.*t5652*t5964;
  t8730 = t8729 + t6617;
  t8428 = -1.*t5652*t5774;
  t8429 = t6805 + t8428;
  t11339 = 6.4*t6360*t6618;
  t11340 = 3.2*t5922*t8730;
  t11349 = 3.2*t8429*t6737;
  t11353 = 6.4*t6618*t6879;
  t11359 = -1.*t5652*t2698;
  t11360 = -1.*t172*t6853;
  t11364 = t11359 + t11360;
  t11365 = 3.2*t5922*t11364;
  t11367 = 3.2*t8429*t6921;
  t11375 = 20.4*t6981*t7103;
  t11378 = 6.8*t7033*t7103;
  t11379 = 20.4*t6981*t8287;
  t11382 = 6.8*t7033*t8287;
  t8826 = -1.*t5652*t8825;
  t8832 = t8806 + t8826;
  t9699 = -1.*t5652*t9209;
  t9718 = t9699 + t9465;
  t11427 = -1.*t5652*t8805;
  t11417 = 20.4*t8761*t8783;
  t11418 = 6.8*t8771*t8783;
  t11419 = 20.4*t8761*t8799;
  t11420 = 6.8*t8771*t8799;
  t11449 = 6.4*t9278*t9467;
  t11450 = 3.2*t8838*t9718;
  t11453 = 3.2*t8832*t9955;
  t11457 = 6.4*t9467*t10012;
  t11458 = -1.*t172*t10003;
  t11463 = t11427 + t11458;
  t11464 = 3.2*t8838*t11463;
  t11465 = 3.2*t8832*t10064;
  t11386 = t11375 + t11378 + t11379 + t11382 + t11339 + t11340 + t11349 + t11353 + t11365 + t11367;
  t11492 = 3.2*t6737*t6879;
  t11495 = 3.2*t6618*t10161;
  t11498 = t6619 + t11360;
  t11506 = 3.2*t5922*t11498;
  t11507 = 3.2*t6360*t6921;
  t11512 = 6.4*t6879*t6921;
  t11369 = t11339 + t11340 + t11349 + t11353 + t11365 + t11367;
  t11513 = t11256 + t11492 + t11495 + t11506 + t11507 + t11512;
  t11514 = -0.5*var2[4]*t11513;
  t11478 = t11417 + t11418 + t11419 + t11420 + t11449 + t11450 + t11453 + t11457 + t11464 + t11465;
  t11524 = 3.2*t9955*t10012;
  t11533 = 3.2*t9467*t10304;
  t11541 = t9766 + t11458;
  t11545 = 3.2*t8838*t11541;
  t11550 = 3.2*t9278*t10064;
  t11552 = 6.4*t10012*t10064;
  t11466 = t11449 + t11450 + t11453 + t11457 + t11464 + t11465;
  t11557 = t11262 + t11524 + t11533 + t11545 + t11550 + t11552;
  t11558 = -0.5*var2[6]*t11557;
  t11581 = 3.2*t5922*t6360;
  t11582 = 3.2*t6618*t6737;
  t11586 = 3.2*t5922*t6879;
  t11587 = 3.2*t6618*t6921;
  t11592 = 6.8*t6982;
  t11598 = 6.8*t6981*t7033;
  t11599 = 6.8*t7158;
  t11603 = 6.8*t7103*t8287;
  t8715 = Power(t6360,2);
  t8718 = Power(t6618,2);
  t9406 = Power(t9278,2);
  t9615 = Power(t9467,2);
  t11616 = 6.8*t8762;
  t11619 = 6.8*t8761*t8771;
  t11620 = 6.8*t8794;
  t11621 = 6.8*t8783*t8799;
  t11639 = 3.2*t8838*t9278;
  t11640 = 3.2*t9467*t9955;
  t11641 = 3.2*t8838*t10012;
  t11644 = 3.2*t9467*t10064;
  t11606 = 3.2*t8429*t5922;
  t11610 = 3.2*t8715;
  t11611 = 3.2*t8718;
  t11615 = 3.2*t8730*t6737;
  t11627 = 3.2*t8832*t8838;
  t11628 = 3.2*t9406;
  t11632 = 3.2*t9615;
  t11633 = 3.2*t9718*t9955;
  t11634 = t11592 + t11598 + t11599 + t11603 + t11606 + t11610 + t11611 + t11615 + t11616 + t11619 + t11620 + t11621 + t11627 + t11628 + t11632 + t11633;
  t11604 = t11592 + t11598 + t11599 + t11603 + t11581 + t11582 + t11586 + t11587;
  t11590 = t11581 + t11582 + t11586 + t11587;
  t11647 = t11616 + t11619 + t11620 + t11621 + t11639 + t11640 + t11641 + t11644;
  t11645 = t11639 + t11640 + t11641 + t11644;
  t11669 = -1.*t231;
  t11670 = 1. + t11669;
  t11671 = 0.4*t11670;
  t11672 = 0.64*t231;
  t11673 = t11671 + t11672;
  t11677 = t11673*t325;
  t11678 = 0.24*t2115*t2125;
  t11679 = t11677 + t11678;
  t11681 = t2115*t11673;
  t11682 = -0.24*t325*t2125;
  t11683 = t11681 + t11682;
  t11692 = -1.*t11673*t325;
  t11693 = -0.24*t2115*t2125;
  t11694 = t11692 + t11693;
  t11680 = -1.*t11679*t5774;
  t11684 = -1.*t2698*t11683;
  t11685 = t11680 + t11684;
  t11691 = 3.2*t6618*t11685;
  t11696 = t11679*t5774;
  t11697 = t2698*t11683;
  t11701 = t11679*t5964;
  t11702 = t5774*t11683;
  t11703 = t11701 + t11702;
  t11704 = 3.2*t11703*t6879;
  t11725 = -0.24*t231*t325;
  t11726 = t11725 + t11693;
  t11706 = -1.*t2698*t11679;
  t11728 = 0.24*t2115*t231;
  t11729 = t11728 + t11682;
  t11708 = -1.*t11683*t6853;
  t11658 = Power(t2115,2);
  t11659 = 0.11*t11658;
  t11665 = Power(t325,2);
  t11666 = 0.11*t11665;
  t11667 = t11659 + t11666;
  t11668 = 6.8*t8287*t11667;
  t11750 = -1.*t8801;
  t11753 = 1. + t11750;
  t11754 = 0.4*t11753;
  t11755 = 0.64*t8801;
  t11756 = t11754 + t11755;
  t11757 = t11756*t8759;
  t11758 = 0.24*t8756*t8803;
  t11759 = t11757 + t11758;
  t11761 = t8756*t11756;
  t11762 = -0.24*t8759*t8803;
  t11763 = t11761 + t11762;
  t11742 = Power(t8756,2);
  t11743 = 0.11*t11742;
  t11744 = Power(t8759,2);
  t11747 = 0.11*t11744;
  t11748 = t11743 + t11747;
  t11749 = 6.8*t8799*t11748;
  t11760 = -1.*t11759*t8825;
  t11764 = -1.*t8805*t11763;
  t11765 = t11760 + t11764;
  t11767 = t11759*t9209;
  t11768 = t8825*t11763;
  t11769 = t11767 + t11768;
  t11774 = -1.*t11756*t8759;
  t11775 = -0.24*t8756*t8803;
  t11776 = t11774 + t11775;
  t11773 = 3.2*t9467*t11765;
  t11780 = t11759*t8825;
  t11781 = t8805*t11763;
  t11787 = 3.2*t11769*t10012;
  t11796 = -0.24*t8801*t8759;
  t11797 = t11796 + t11775;
  t11789 = -1.*t8805*t11759;
  t11799 = 0.24*t8756*t8801;
  t11800 = t11799 + t11762;
  t11791 = -1.*t11763*t10003;
  t11695 = t11694*t5774;
  t11698 = t5964*t11683;
  t11699 = t11695 + t11696 + t11697 + t11698;
  t11700 = 3.2*t6618*t11699;
  t11705 = -1.*t2698*t11694;
  t11707 = -1.*t5774*t11683;
  t11709 = t11705 + t11706 + t11707 + t11708;
  t11710 = 3.2*t6360*t11709;
  t11711 = t11668 + t11691 + t11700 + t11704 + t11710;
  t11819 = -1.*t2115*t11673;
  t11820 = 0.24*t325*t2125;
  t11821 = t11819 + t11820;
  t11813 = 3.2*t11703*t10161;
  t11814 = 3.2*t11685*t6921;
  t11727 = t11726*t5774;
  t11730 = t5964*t11729;
  t11731 = t11727 + t11696 + t11697 + t11730;
  t11818 = -1.*t5964*t11683;
  t11824 = -1.*t11679*t6853;
  t11733 = -1.*t2698*t11726;
  t11734 = -1.*t5774*t11729;
  t11735 = t11733 + t11706 + t11734 + t11708;
  t11829 = t2698*t11679;
  t11842 = -0.24*t2115*t231;
  t11843 = t11842 + t11820;
  t11833 = t11683*t6853;
  t11732 = 3.2*t6618*t11731;
  t11736 = 3.2*t6360*t11735;
  t11737 = t11691 + t11732 + t11704 + t11736;
  t11838 = 3.2*t11699*t6921;
  t11839 = 3.2*t11731*t6921;
  t11840 = -1.*t11726*t5774;
  t11841 = -1.*t2698*t11729;
  t11844 = -1.*t2698*t11843;
  t11845 = -1.*t11694*t6853;
  t11846 = -1.*t11726*t6853;
  t11847 = t11840 + t11684 + t11818 + t11841 + t11844 + t11845 + t11846 + t11824;
  t11848 = 3.2*t6737*t11847;
  t11849 = 3.2*t5922*t11709;
  t11850 = 3.2*t5922*t11735;
  t11851 = t2698*t11694;
  t11852 = t2698*t11726;
  t11853 = t11726*t5964;
  t11854 = t5774*t11729;
  t11855 = t5774*t11843;
  t11856 = t11851 + t11852 + t11829 + t11853 + t11702 + t11854 + t11855 + t11833;
  t11857 = 3.2*t5922*t11856;
  t11858 = t11813 + t11814 + t11838 + t11839 + t11848 + t11849 + t11850 + t11857;
  t11777 = t11776*t8825;
  t11782 = t9209*t11763;
  t11783 = t11777 + t11780 + t11781 + t11782;
  t11786 = 3.2*t9467*t11783;
  t11788 = -1.*t8805*t11776;
  t11790 = -1.*t8825*t11763;
  t11792 = t11788 + t11789 + t11790 + t11791;
  t11793 = 3.2*t9278*t11792;
  t11794 = t11749 + t11773 + t11786 + t11787 + t11793;
  t11885 = -1.*t8756*t11756;
  t11886 = 0.24*t8759*t8803;
  t11887 = t11885 + t11886;
  t11879 = 3.2*t11769*t10304;
  t11880 = 3.2*t11765*t10064;
  t11798 = t11797*t8825;
  t11801 = t9209*t11800;
  t11802 = t11798 + t11780 + t11781 + t11801;
  t11884 = -1.*t9209*t11763;
  t11890 = -1.*t11759*t10003;
  t11804 = -1.*t8805*t11797;
  t11805 = -1.*t8825*t11800;
  t11806 = t11804 + t11789 + t11805 + t11791;
  t11895 = t8805*t11759;
  t11908 = -0.24*t8756*t8801;
  t11909 = t11908 + t11886;
  t11899 = t11763*t10003;
  t11803 = 3.2*t9467*t11802;
  t11807 = 3.2*t9278*t11806;
  t11808 = t11773 + t11803 + t11787 + t11807;
  t11904 = 3.2*t11783*t10064;
  t11905 = 3.2*t11802*t10064;
  t11906 = -1.*t11797*t8825;
  t11907 = -1.*t8805*t11800;
  t11910 = -1.*t8805*t11909;
  t11911 = -1.*t11776*t10003;
  t11912 = -1.*t11797*t10003;
  t11913 = t11906 + t11764 + t11884 + t11907 + t11910 + t11911 + t11912 + t11890;
  t11914 = 3.2*t9955*t11913;
  t11915 = 3.2*t8838*t11792;
  t11916 = 3.2*t8838*t11806;
  t11917 = t8805*t11776;
  t11918 = t8805*t11797;
  t11919 = t11797*t9209;
  t11920 = t8825*t11800;
  t11921 = t8825*t11909;
  t11922 = t11917 + t11918 + t11895 + t11919 + t11768 + t11920 + t11921 + t11899;
  t11923 = 3.2*t8838*t11922;
  t11924 = t11879 + t11880 + t11904 + t11905 + t11914 + t11915 + t11916 + t11923;
  t11945 = 3.2*t5922*t11685;
  t11947 = 3.2*t11703*t6921;
  t11944 = 6.8*t6981*t11667;
  t11958 = 6.8*t8761*t11748;
  t11963 = 3.2*t8838*t11765;
  t11965 = 3.2*t11769*t10064;
  t11955 = -2.88*t172;
  t11956 = 3.2*t6360*t11685;
  t11957 = 3.2*t6618*t11703;
  t11959 = 3.2*t9278*t11765;
  t11960 = 3.2*t9467*t11769;
  t11961 = t11955 + t11944 + t11956 + t11957 + t11958 + t11959 + t11960;
  t11946 = 3.2*t5922*t11699;
  t11948 = 3.2*t6737*t11709;
  t11949 = t11944 + t11945 + t11946 + t11947 + t11948;
  t11951 = 3.2*t5922*t11731;
  t11952 = 3.2*t6737*t11735;
  t11953 = t11945 + t11951 + t11947 + t11952;
  t11964 = 3.2*t8838*t11783;
  t11966 = 3.2*t9955*t11792;
  t11967 = t11958 + t11963 + t11964 + t11965 + t11966;
  t11969 = 3.2*t8838*t11802;
  t11970 = 3.2*t9955*t11806;
  t11971 = t11963 + t11969 + t11965 + t11970;
  t11979 = 0.748*t8287;
  t11985 = t11673*t2125;
  t11986 = -0.24*t231*t2125;
  t11987 = t11985 + t11986;
  t11980 = t11673*t231;
  t11981 = Power(t2125,2);
  t11982 = 0.24*t11981;
  t11983 = t11980 + t11982;
  t11991 = 3.2*t11987*t6618;
  t11992 = 3.2*t11983*t6879;
  t11993 = t11979 + t11991 + t11992;
  t11995 = Power(t231,2);
  t11996 = -0.24*t11995;
  t11997 = t11980 + t11996;
  t12008 = 3.2*t11983*t10161;
  t12009 = 3.2*t11987*t6921;
  t11999 = -1.*t11673*t2125;
  t12000 = 0.24*t231*t2125;
  t12001 = t11999 + t12000;
  t11998 = 3.2*t11997*t6360;
  t12002 = 3.2*t12001*t6618;
  t12003 = t11998 + t11991 + t12002 + t11992;
  t12012 = 3.2*t11997*t5922;
  t12013 = 3.2*t12001*t6921;
  t12014 = t12012 + t12008 + t12009 + t12013;
  t12031 = 0.748*t6981;
  t12036 = 3.2*t11987*t5922;
  t12037 = 3.2*t11983*t6921;
  t12032 = 3.2*t11987*t6360;
  t12033 = 3.2*t11983*t6618;
  t12034 = t12031 + t12032 + t12033;
  t12038 = t12031 + t12036 + t12037;
  t12040 = 3.2*t12001*t5922;
  t12041 = 3.2*t11997*t6737;
  t12042 = t12036 + t12040 + t12041 + t12037;
  t12053 = -0.384*var2[2]*t6879;
  t12054 = -0.384*var2[3]*t10161;
  t12055 = -0.384*var2[4]*t10161;
  t12056 = t12053 + t12054 + t12055;
  t12057 = var2[0]*t12056;
  t12063 = -0.384*var2[0]*t6921;
  t12064 = 0.748*t8799;
  t12070 = t11756*t8803;
  t12071 = -0.24*t8801*t8803;
  t12072 = t12070 + t12071;
  t12065 = t11756*t8801;
  t12066 = Power(t8803,2);
  t12067 = 0.24*t12066;
  t12068 = t12065 + t12067;
  t12076 = 3.2*t12072*t9467;
  t12077 = 3.2*t12068*t10012;
  t12078 = t12064 + t12076 + t12077;
  t12080 = Power(t8801,2);
  t12081 = -0.24*t12080;
  t12082 = t12065 + t12081;
  t12093 = 3.2*t12068*t10304;
  t12094 = 3.2*t12072*t10064;
  t12084 = -1.*t11756*t8803;
  t12085 = 0.24*t8801*t8803;
  t12086 = t12084 + t12085;
  t12083 = 3.2*t12082*t9278;
  t12087 = 3.2*t12086*t9467;
  t12088 = t12083 + t12076 + t12087 + t12077;
  t12097 = 3.2*t12082*t8838;
  t12098 = 3.2*t12086*t10064;
  t12099 = t12097 + t12093 + t12094 + t12098;
  t12116 = 0.748*t8761;
  t12121 = 3.2*t12072*t8838;
  t12122 = 3.2*t12068*t10064;
  t12117 = 3.2*t12072*t9278;
  t12118 = 3.2*t12068*t9467;
  t12119 = t12116 + t12117 + t12118;
  t12123 = t12116 + t12121 + t12122;
  t12125 = 3.2*t12086*t8838;
  t12126 = 3.2*t12082*t9955;
  t12127 = t12121 + t12125 + t12126 + t12122;
  t12138 = -0.384*var2[2]*t10012;
  t12139 = -0.384*var2[5]*t10304;
  t12140 = -0.384*var2[6]*t10304;
  t12141 = t12138 + t12139 + t12140;
  t12142 = var2[0]*t12141;
  t12148 = -0.384*var2[0]*t10064;
  p_output1[0]=var2[0]*(-0.5*(t7025 + t7036 + t7177 + t8352 + 6.4*t5922*t8429 + 6.4*t8715 + 6.4*t8718 + 6.4*t6737*t8730 + t8763 + t8773 + t8795 + t8800 + 6.4*t8832*t8838 + 6.4*t9406 + 6.4*t9615 + 6.4*t9718*t9955)*var2[2] - 0.5*t8404*var2[3] - 0.5*t6924*var2[4] - 0.5*t10130*var2[5] - 0.5*t10068*var2[6]);
  p_output1[1]=var2[0]*(t10192 - 0.5*t8404*var2[2] - 0.5*(t10157 + t10166 + t10169 + t10185 + t7025 + t7036 + t7177 + t8352)*var2[3]);
  p_output1[2]=var2[0]*(t10192 - 0.5*t6924*var2[2] - 0.5*t10191*var2[3]);
  p_output1[3]=var2[0]*(t11194 - 0.5*t10130*var2[2] - 0.5*(t10255 + t10333 + t11172 + t11181 + t8763 + t8773 + t8795 + t8800)*var2[5]);
  p_output1[4]=var2[0]*(t11194 - 0.5*t10068*var2[2] - 0.5*t11191*var2[5]);
  p_output1[5]=-0.5*t11267*var2[2] - 0.5*t11252*var2[3] - 0.5*t11238*var2[4] - 0.5*t11277*var2[5] - 0.5*t11274*var2[6];
  p_output1[6]=-0.5*t11267*var2[0];
  p_output1[7]=-0.5*t11252*var2[0];
  p_output1[8]=-0.5*t11238*var2[0];
  p_output1[9]=-0.5*t11277*var2[0];
  p_output1[10]=-0.5*t11274*var2[0];
  p_output1[11]=var2[0]*(-0.5*(t11375 + t11378 + t11379 + t11382 + t11417 + t11418 + t11419 + t11420 + 3.2*t5922*(t11359 + t6680) + 3.2*t6737*(t10160 + t8428) + 9.6*t6618*t8429 + 9.6*t6360*t8730 + 9.6*t8832*t9467 + 9.6*t9278*t9718 + 3.2*t8838*(t11427 + t9954) + 3.2*(t10269 + t8826)*t9955)*var2[2] - 0.5*t11386*var2[3] - 0.5*t11369*var2[4] - 0.5*t11478*var2[5] - 0.5*t11466*var2[6]);
  p_output1[12]=var2[0]*(t11514 - 0.5*t11386*var2[2] - 0.5*(t11256 + t11375 + t11378 + t11379 + t11382 + t11492 + t11495 + t11506 + t11507 + t11512)*var2[3]);
  p_output1[13]=var2[0]*(t11514 - 0.5*t11369*var2[2] - 0.5*t11513*var2[3]);
  p_output1[14]=var2[0]*(t11558 - 0.5*t11478*var2[2] - 0.5*(t11262 + t11417 + t11418 + t11419 + t11420 + t11524 + t11533 + t11545 + t11550 + t11552)*var2[5]);
  p_output1[15]=var2[0]*(t11558 - 0.5*t11466*var2[2] - 0.5*t11557*var2[5]);
  p_output1[16]=-0.5*t11634*var2[2] - 0.5*t11604*var2[3] - 0.5*t11590*var2[4] - 0.5*t11647*var2[5] - 0.5*t11645*var2[6];
  p_output1[17]=-0.5*t11634*var2[0];
  p_output1[18]=-0.5*t11604*var2[0];
  p_output1[19]=-0.5*t11590*var2[0];
  p_output1[20]=-0.5*t11647*var2[0];
  p_output1[21]=-0.5*t11645*var2[0];
  p_output1[22]=var2[0]*(-0.5*(t11668 + t11749 - 2.88*t5652 + 3.2*t11703*t8429 + 3.2*t11685*t8730 + 3.2*t11769*t8832 + 3.2*t11765*t9718)*var2[2] - 0.5*t11711*var2[3] - 0.5*t11737*var2[4] - 0.5*t11794*var2[5] - 0.5*t11808*var2[6]);
  p_output1[23]=var2[0]*(-0.5*t11711*var2[2] - 0.5*(t11668 + t11813 + t11814 + 6.4*t11709*t5922 + 3.2*t5922*(t11829 + t11833 + 2.*t11694*t2698 + 2.*t11683*t5774 + t11821*t5774 + t11694*t5964) + 3.2*t6737*(t11818 + t11824 - 2.*t11683*t2698 - 1.*t11821*t2698 - 1.*t11694*t5774 - 2.*t11694*t6853) + 6.4*t11699*t6921)*var2[3] - 0.5*t11858*var2[4]);
  p_output1[24]=var2[0]*(-0.5*t11737*var2[2] - 0.5*t11858*var2[3] - 0.5*(t11813 + t11814 + 6.4*t11735*t5922 + 3.2*(t11829 + t11833 + t11853 + t11855 + 2.*t11726*t2698 + 2.*t11729*t5774)*t5922 + 3.2*t6737*(t11818 + t11824 + t11840 + t11844 - 2.*t11729*t2698 - 2.*t11726*t6853) + 6.4*t11731*t6921)*var2[4]);
  p_output1[25]=var2[0]*(-0.5*t11794*var2[2] - 0.5*(t11749 + 6.4*t10064*t11783 + t11879 + t11880 + 6.4*t11792*t8838 + 3.2*t8838*(t11895 + t11899 + 2.*t11776*t8805 + 2.*t11763*t8825 + t11887*t8825 + t11776*t9209) + 3.2*(-2.*t10003*t11776 + t11884 + t11890 - 2.*t11763*t8805 - 1.*t11887*t8805 - 1.*t11776*t8825)*t9955)*var2[5] - 0.5*t11924*var2[6]);
  p_output1[26]=var2[0]*(-0.5*t11808*var2[2] - 0.5*t11924*var2[5] - 0.5*(6.4*t10064*t11802 + t11879 + t11880 + 6.4*t11806*t8838 + 3.2*(t11895 + t11899 + t11919 + t11921 + 2.*t11797*t8805 + 2.*t11800*t8825)*t8838 + 3.2*(-2.*t10003*t11797 + t11884 + t11890 + t11906 + t11910 - 2.*t11800*t8805)*t9955)*var2[6]);
  p_output1[27]=-0.5*t11961*var2[2] - 0.5*t11949*var2[3] - 0.5*t11953*var2[4] - 0.5*t11967*var2[5] - 0.5*t11971*var2[6];
  p_output1[28]=-0.5*t11961*var2[0];
  p_output1[29]=-0.5*t11949*var2[0];
  p_output1[30]=-0.5*t11953*var2[0];
  p_output1[31]=-0.5*t11967*var2[0];
  p_output1[32]=-0.5*t11971*var2[0];
  p_output1[33]=var2[0]*(-0.5*(t11979 + 3.2*t11983*t8429 + 3.2*t11987*t8730)*var2[2] - 0.5*t11993*var2[3] - 0.5*t12003*var2[4]);
  p_output1[34]=var2[0]*(-0.5*t11993*var2[2] - 0.5*(t11979 + t12008 + t12009)*var2[3] - 0.5*t12014*var2[4]);
  p_output1[35]=var2[0]*(-0.5*t12003*var2[2] - 0.5*t12014*var2[3] - 0.5*(t12008 + t12009 + 6.4*t11997*t5922 + 3.2*(0.24*t11995 - 1.*t11673*t231)*t5922 + 3.2*t12001*t6737 + 6.4*t12001*t6921)*var2[4]);
  p_output1[36]=-0.5*t12034*var2[2] - 0.5*t12038*var2[3] - 0.5*t12042*var2[4];
  p_output1[37]=-0.5*t12034*var2[0];
  p_output1[38]=-0.5*t12038*var2[0];
  p_output1[39]=-0.5*t12042*var2[0];
  p_output1[40]=var2[0]*(-0.384*t8429*var2[2] - 0.384*t6879*var2[3] - 0.384*t6879*var2[4]);
  p_output1[41]=t12057;
  p_output1[42]=t12057;
  p_output1[43]=-0.384*t6618*var2[2] - 0.384*t6921*var2[3] - 0.384*t6921*var2[4];
  p_output1[44]=-0.384*t6618*var2[0];
  p_output1[45]=t12063;
  p_output1[46]=t12063;
  p_output1[47]=var2[0]*(-0.5*(t12064 + 3.2*t12068*t8832 + 3.2*t12072*t9718)*var2[2] - 0.5*t12078*var2[5] - 0.5*t12088*var2[6]);
  p_output1[48]=var2[0]*(-0.5*t12078*var2[2] - 0.5*(t12064 + t12093 + t12094)*var2[5] - 0.5*t12099*var2[6]);
  p_output1[49]=var2[0]*(-0.5*t12088*var2[2] - 0.5*t12099*var2[5] - 0.5*(6.4*t10064*t12086 + t12093 + t12094 + 6.4*t12082*t8838 + 3.2*(0.24*t12080 - 1.*t11756*t8801)*t8838 + 3.2*t12086*t9955)*var2[6]);
  p_output1[50]=-0.5*t12119*var2[2] - 0.5*t12123*var2[5] - 0.5*t12127*var2[6];
  p_output1[51]=-0.5*t12119*var2[0];
  p_output1[52]=-0.5*t12123*var2[0];
  p_output1[53]=-0.5*t12127*var2[0];
  p_output1[54]=var2[0]*(-0.384*t8832*var2[2] - 0.384*t10012*var2[5] - 0.384*t10012*var2[6]);
  p_output1[55]=t12142;
  p_output1[56]=t12142;
  p_output1[57]=-0.384*t9467*var2[2] - 0.384*t10064*var2[5] - 0.384*t10064*var2[6];
  p_output1[58]=-0.384*t9467*var2[0];
  p_output1[59]=t12148;
  p_output1[60]=t12148;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec1_five_link_walker.hh"

namespace Times[step, Pattern[Rabbit, Blank[]]]
{

void J_Ce1_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
