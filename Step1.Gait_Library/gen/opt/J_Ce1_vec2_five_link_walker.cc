/*
 * Automatically Generated from Mathematica.
 * Tue 17 Sep 2019 23:17:11 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t357;
  double t243;
  double t313;
  double t1002;
  double t1940;
  double t144;
  double t1961;
  double t2135;
  double t2139;
  double t2176;
  double t2186;
  double t2189;
  double t2141;
  double t319;
  double t1059;
  double t1845;
  double t2217;
  double t2215;
  double t2228;
  double t4925;
  double t2282;
  double t2785;
  double t5758;
  double t5809;
  double t5826;
  double t4926;
  double t5249;
  double t6719;
  double t6727;
  double t6820;
  double t6642;
  double t6707;
  double t6718;
  double t6855;
  double t6856;
  double t6870;
  double t6891;
  double t6892;
  double t6899;
  double t1850;
  double t2148;
  double t2236;
  double t2786;
  double t2902;
  double t3143;
  double t5577;
  double t5584;
  double t5659;
  double t5734;
  double t5863;
  double t5865;
  double t5933;
  double t5961;
  double t5968;
  double t5970;
  double t6062;
  double t6083;
  double t6123;
  double t6547;
  double t6844;
  double t6881;
  double t6937;
  double t6941;
  double t7182;
  double t7784;
  double t8157;
  double t8178;
  double t8209;
  double t7212;
  double t7821;
  double t7939;
  double t8282;
  double t8290;
  double t8304;
  double t8322;
  double t8382;
  double t8383;
  double t8418;
  double t8552;
  double t8491;
  double t8571;
  double t8714;
  double t8717;
  double t8719;
  double t8728;
  double t8776;
  double t8782;
  double t8784;
  double t8755;
  double t8786;
  double t8733;
  double t8809;
  double t8785;
  double t8787;
  double t8754;
  double t8765;
  double t8792;
  double t8807;
  double t8789;
  double t8790;
  double t8716;
  double t8753;
  double t8820;
  double t8822;
  double t8808;
  double t8846;
  double t8847;
  double t8848;
  double t8242;
  double t8306;
  double t8397;
  double t8408;
  double t8842;
  double t8844;
  double t8845;
  double t8855;
  double t8856;
  double t8857;
  double t8858;
  double t8859;
  double t8860;
  double t8863;
  double t8864;
  double t8870;
  double t6943;
  double t7171;
  double t8896;
  double t8898;
  double t8899;
  double t8900;
  double t8902;
  double t8905;
  double t8906;
  double t8907;
  double t6554;
  double t8908;
  double t8909;
  double t8873;
  double t8815;
  double t8922;
  double t8923;
  double t8924;
  double t8925;
  double t8926;
  double t8927;
  double t8928;
  double t8929;
  double t8871;
  double t8930;
  double t8945;
  double t9504;
  double t9510;
  double t9681;
  double t9977;
  double t10041;
  double t10118;
  double t10128;
  double t10133;
  double t10134;
  double t10136;
  double t10204;
  double t10209;
  double t10214;
  double t10215;
  double t10216;
  double t10219;
  double t11221;
  double t11231;
  double t11241;
  double t11253;
  double t10193;
  double t10194;
  double t10198;
  double t10199;
  double t10200;
  double t10203;
  double t10222;
  double t10231;
  double t11195;
  double t11198;
  double t11201;
  double t11207;
  double t11215;
  double t10149;
  double t9978;
  double t11278;
  double t11268;
  double t11387;
  double t11392;
  double t11393;
  double t11394;
  double t11407;
  double t11421;
  double t11424;
  double t11435;
  double t11436;
  double t7172;
  double t7031;
  double t8817;
  double t8810;
  double t11491;
  double t11515;
  double t11516;
  double t11517;
  double t11518;
  double t11568;
  double t11569;
  double t11570;
  double t11571;
  double t11438;
  double t11653;
  double t11654;
  double t11655;
  double t11656;
  double t11657;
  double t11395;
  double t11724;
  double t11738;
  double t11605;
  double t11810;
  double t11811;
  double t11812;
  double t11815;
  double t11816;
  double t11572;
  double t11817;
  double t11822;
  double t11836;
  double t11837;
  double t11863;
  double t11864;
  double t11861;
  double t11862;
  double t11865;
  double t11866;
  double t11867;
  double t11859;
  double t11834;
  double t11871;
  double t11869;
  double t11892;
  double t11893;
  double t11894;
  double t11896;
  double t11897;
  double t11898;
  double t11900;
  double t11901;
  double t11903;
  double t11925;
  double t11926;
  double t11930;
  double t11931;
  double t11932;
  double t11902;
  double t11927;
  double t11928;
  double t11929;
  double t11934;
  double t11935;
  double t11939;
  double t11940;
  double t11941;
  double t11942;
  double t11975;
  double t11976;
  double t11950;
  double t11978;
  double t11984;
  double t11962;
  double t11881;
  double t11882;
  double t11883;
  double t11888;
  double t11889;
  double t11891;
  double t12023;
  double t12024;
  double t12025;
  double t12026;
  double t12027;
  double t12028;
  double t12029;
  double t12030;
  double t12039;
  double t12043;
  double t12044;
  double t12017;
  double t12018;
  double t12019;
  double t12020;
  double t12021;
  double t12022;
  double t12035;
  double t12045;
  double t12046;
  double t12048;
  double t12049;
  double t12050;
  double t12060;
  double t12061;
  double t12062;
  double t12059;
  double t12073;
  double t12074;
  double t12090;
  double t12104;
  double t12105;
  double t12092;
  double t12107;
  double t12108;
  double t12096;
  double t11933;
  double t11936;
  double t11937;
  double t11938;
  double t11943;
  double t11954;
  double t11968;
  double t11972;
  double t11973;
  double t12137;
  double t12143;
  double t12144;
  double t12131;
  double t11977;
  double t11988;
  double t11989;
  double t12133;
  double t12136;
  double t12147;
  double t11994;
  double t12004;
  double t12005;
  double t12153;
  double t12166;
  double t12167;
  double t12157;
  double t11990;
  double t12006;
  double t12007;
  double t12162;
  double t12163;
  double t12164;
  double t12165;
  double t12168;
  double t12169;
  double t12170;
  double t12171;
  double t12172;
  double t12173;
  double t12174;
  double t12175;
  double t12176;
  double t12177;
  double t12178;
  double t12179;
  double t12180;
  double t12181;
  double t12182;
  double t12069;
  double t12075;
  double t12079;
  double t12089;
  double t12091;
  double t12095;
  double t12100;
  double t12101;
  double t12102;
  double t12209;
  double t12210;
  double t12211;
  double t12203;
  double t12106;
  double t12109;
  double t12110;
  double t12205;
  double t12208;
  double t12214;
  double t12112;
  double t12113;
  double t12114;
  double t12219;
  double t12232;
  double t12233;
  double t12223;
  double t12111;
  double t12115;
  double t12120;
  double t12228;
  double t12229;
  double t12230;
  double t12231;
  double t12234;
  double t12235;
  double t12236;
  double t12237;
  double t12238;
  double t12239;
  double t12240;
  double t12241;
  double t12242;
  double t12243;
  double t12244;
  double t12245;
  double t12246;
  double t12247;
  double t12248;
  double t12269;
  double t12271;
  double t12268;
  double t12282;
  double t12287;
  double t12289;
  double t12279;
  double t12280;
  double t12281;
  double t12283;
  double t12284;
  double t12285;
  double t12270;
  double t12272;
  double t12273;
  double t12275;
  double t12276;
  double t12277;
  double t12288;
  double t12290;
  double t12291;
  double t12293;
  double t12294;
  double t12295;
  double t12303;
  double t12304;
  double t12305;
  double t12306;
  double t12308;
  double t12309;
  double t12310;
  double t12311;
  double t12315;
  double t12316;
  double t12317;
  double t12323;
  double t12324;
  double t12325;
  double t12332;
  double t12319;
  double t12320;
  double t12321;
  double t12333;
  double t12322;
  double t12326;
  double t12327;
  double t12336;
  double t12337;
  double t12338;
  double t12355;
  double t12360;
  double t12361;
  double t12356;
  double t12357;
  double t12358;
  double t12362;
  double t12364;
  double t12365;
  double t12366;
  double t12377;
  double t12378;
  double t12379;
  double t12380;
  double t12381;
  double t12387;
  double t12388;
  double t12389;
  double t12390;
  double t12391;
  double t12393;
  double t12394;
  double t12395;
  double t12396;
  double t12400;
  double t12401;
  double t12402;
  double t12408;
  double t12409;
  double t12410;
  double t12417;
  double t12404;
  double t12405;
  double t12406;
  double t12418;
  double t12407;
  double t12411;
  double t12412;
  double t12421;
  double t12422;
  double t12423;
  double t12440;
  double t12445;
  double t12446;
  double t12441;
  double t12442;
  double t12443;
  double t12447;
  double t12449;
  double t12450;
  double t12451;
  double t12462;
  double t12463;
  double t12464;
  double t12465;
  double t12466;
  double t12472;
  t357 = Cos(var1[3]);
  t243 = Cos(var1[4]);
  t313 = Sin(var1[3]);
  t1002 = Sin(var1[4]);
  t1940 = Cos(var1[2]);
  t144 = Sin(var1[2]);
  t1961 = t357*t243;
  t2135 = -1.*t313*t1002;
  t2139 = t1961 + t2135;
  t2176 = -1.*t243*t313;
  t2186 = -1.*t357*t1002;
  t2189 = t2176 + t2186;
  t2141 = t1940*t2139;
  t319 = t243*t313;
  t1059 = t357*t1002;
  t1845 = t319 + t1059;
  t2217 = -1.*t144*t2139;
  t2215 = t1940*t2189;
  t2228 = t2215 + t2217;
  t4925 = -1.*t144*t2189;
  t2282 = t144*t2189;
  t2785 = t2282 + t2141;
  t5758 = -1.*t357*t243;
  t5809 = t313*t1002;
  t5826 = t5758 + t5809;
  t4926 = -1.*t1940*t2139;
  t5249 = t4925 + t4926;
  t6719 = t1940*t357;
  t6727 = -1.*t144*t313;
  t6820 = t6719 + t6727;
  t6642 = -1.*t357*t144;
  t6707 = -1.*t1940*t313;
  t6718 = t6642 + t6707;
  t6855 = t357*t144;
  t6856 = t1940*t313;
  t6870 = t6855 + t6856;
  t6891 = -1.*t1940*t357;
  t6892 = t144*t313;
  t6899 = t6891 + t6892;
  t1850 = -1.*t144*t1845;
  t2148 = t1850 + t2141;
  t2236 = 6.4*t2148*t2228;
  t2786 = -1.*t1940*t1845;
  t2902 = t2786 + t2217;
  t3143 = 3.2*t2785*t2902;
  t5577 = t1940*t1845;
  t5584 = t144*t2139;
  t5659 = t5577 + t5584;
  t5734 = 3.2*t5249*t5659;
  t5863 = t1940*t5826;
  t5865 = t4925 + t5863;
  t5933 = 6.4*t2228*t5865;
  t5961 = -1.*t1940*t2189;
  t5968 = -1.*t144*t5826;
  t5970 = t5961 + t5968;
  t6062 = 3.2*t2785*t5970;
  t6083 = t144*t5826;
  t6123 = t2215 + t6083;
  t6547 = 3.2*t5249*t6123;
  t6844 = 20.4*t6718*t6820;
  t6881 = 6.8*t6870*t6820;
  t6937 = 20.4*t6718*t6899;
  t6941 = 6.8*t6870*t6899;
  t7182 = Cos(var1[5]);
  t7784 = Sin(var1[5]);
  t8157 = t1940*t7182;
  t8178 = -1.*t144*t7784;
  t8209 = t8157 + t8178;
  t7212 = -1.*t7182*t144;
  t7821 = -1.*t1940*t7784;
  t7939 = t7212 + t7821;
  t8282 = t7182*t144;
  t8290 = t1940*t7784;
  t8304 = t8282 + t8290;
  t8322 = -1.*t1940*t7182;
  t8382 = t144*t7784;
  t8383 = t8322 + t8382;
  t8418 = Cos(var1[6]);
  t8552 = Sin(var1[6]);
  t8491 = -1.*t8418*t7784;
  t8571 = -1.*t7182*t8552;
  t8714 = t8491 + t8571;
  t8717 = t7182*t8418;
  t8719 = -1.*t7784*t8552;
  t8728 = t8717 + t8719;
  t8776 = t8418*t7784;
  t8782 = t7182*t8552;
  t8784 = t8776 + t8782;
  t8755 = -1.*t144*t8728;
  t8786 = t1940*t8728;
  t8733 = -1.*t1940*t8728;
  t8809 = t144*t8728;
  t8785 = -1.*t144*t8784;
  t8787 = t8785 + t8786;
  t8754 = t1940*t8714;
  t8765 = t8754 + t8755;
  t8792 = t144*t8714;
  t8807 = t8792 + t8786;
  t8789 = -1.*t1940*t8784;
  t8790 = t8789 + t8755;
  t8716 = -1.*t144*t8714;
  t8753 = t8716 + t8733;
  t8820 = t1940*t8784;
  t8822 = t8820 + t8809;
  t8808 = -1.*t1940*t8714;
  t8846 = -1.*t7182*t8418;
  t8847 = t7784*t8552;
  t8848 = t8846 + t8847;
  t8242 = 20.4*t7939*t8209;
  t8306 = 6.8*t8304*t8209;
  t8397 = 20.4*t7939*t8383;
  t8408 = 6.8*t8304*t8383;
  t8842 = 6.4*t8787*t8765;
  t8844 = 3.2*t8807*t8790;
  t8845 = 3.2*t8753*t8822;
  t8855 = t1940*t8848;
  t8856 = t8716 + t8855;
  t8857 = 6.4*t8765*t8856;
  t8858 = -1.*t144*t8848;
  t8859 = t8808 + t8858;
  t8860 = 3.2*t8807*t8859;
  t8863 = t144*t8848;
  t8864 = t8754 + t8863;
  t8870 = 3.2*t8753*t8864;
  t6943 = t6844 + t6881 + t6937 + t6941 + t2236 + t3143 + t5734 + t5933 + t6062 + t6547;
  t7171 = t144*t1845;
  t8896 = 6.4*t2785*t2228;
  t8898 = 3.2*t5659*t5865;
  t8899 = t7171 + t5863;
  t8900 = 3.2*t2228*t8899;
  t8902 = t5577 + t5968;
  t8905 = 3.2*t2785*t8902;
  t8906 = 3.2*t2148*t6123;
  t8907 = 6.4*t5865*t6123;
  t6554 = t2236 + t3143 + t5734 + t5933 + t6062 + t6547;
  t8908 = t8896 + t8898 + t8900 + t8905 + t8906 + t8907;
  t8909 = -0.5*var2[4]*t8908;
  t8873 = t8242 + t8306 + t8397 + t8408 + t8842 + t8844 + t8845 + t8857 + t8860 + t8870;
  t8815 = t144*t8784;
  t8922 = 6.4*t8807*t8765;
  t8923 = 3.2*t8822*t8856;
  t8924 = t8815 + t8855;
  t8925 = 3.2*t8765*t8924;
  t8926 = t8820 + t8858;
  t8927 = 3.2*t8807*t8926;
  t8928 = 3.2*t8787*t8864;
  t8929 = 6.4*t8856*t8864;
  t8871 = t8842 + t8844 + t8845 + t8857 + t8860 + t8870;
  t8930 = t8922 + t8923 + t8925 + t8927 + t8928 + t8929;
  t8945 = -0.5*var2[6]*t8930;
  t9504 = 3.2*t2785*t2148;
  t9510 = 3.2*t2228*t5659;
  t9681 = 3.2*t2785*t5865;
  t9977 = 3.2*t2228*t6123;
  t10041 = Power(t6718,2);
  t10118 = 6.8*t10041;
  t10128 = 6.8*t6718*t6870;
  t10133 = Power(t6820,2);
  t10134 = 6.8*t10133;
  t10136 = 6.8*t6820*t6899;
  t10204 = Power(t7939,2);
  t10209 = 6.8*t10204;
  t10214 = 6.8*t7939*t8304;
  t10215 = Power(t8209,2);
  t10216 = 6.8*t10215;
  t10219 = 6.8*t8209*t8383;
  t11221 = 3.2*t8807*t8787;
  t11231 = 3.2*t8765*t8822;
  t11241 = 3.2*t8807*t8856;
  t11253 = 3.2*t8765*t8864;
  t10193 = 3.2*t5249*t2785;
  t10194 = Power(t2148,2);
  t10198 = 3.2*t10194;
  t10199 = Power(t2228,2);
  t10200 = 3.2*t10199;
  t10203 = 3.2*t2902*t5659;
  t10222 = 3.2*t8753*t8807;
  t10231 = Power(t8787,2);
  t11195 = 3.2*t10231;
  t11198 = Power(t8765,2);
  t11201 = 3.2*t11198;
  t11207 = 3.2*t8790*t8822;
  t11215 = t10118 + t10128 + t10134 + t10136 + t10193 + t10198 + t10200 + t10203 + t10209 + t10214 + t10216 + t10219 + t10222 + t11195 + t11201 + t11207;
  t10149 = t10118 + t10128 + t10134 + t10136 + t9504 + t9510 + t9681 + t9977;
  t9978 = t9504 + t9510 + t9681 + t9977;
  t11278 = t10209 + t10214 + t10216 + t10219 + t11221 + t11231 + t11241 + t11253;
  t11268 = t11221 + t11231 + t11241 + t11253;
  t11387 = 6.4*t5249*t2148;
  t11392 = 6.4*t2228*t2902;
  t11393 = 6.4*t5249*t5865;
  t11394 = 6.4*t2228*t5970;
  t11407 = 13.6*t10041;
  t11421 = 13.6*t6718*t6870;
  t11424 = 13.6*t6820*t6899;
  t11435 = Power(t6899,2);
  t11436 = 13.6*t11435;
  t7172 = t7171 + t4926;
  t7031 = t5961 + t5584;
  t8817 = t8815 + t8733;
  t8810 = t8808 + t8809;
  t11491 = 13.6*t10204;
  t11515 = 13.6*t7939*t8304;
  t11516 = 13.6*t8209*t8383;
  t11517 = Power(t8383,2);
  t11518 = 13.6*t11517;
  t11568 = 6.4*t8753*t8787;
  t11569 = 6.4*t8765*t8790;
  t11570 = 6.4*t8753*t8856;
  t11571 = 6.4*t8765*t8859;
  t11438 = t11407 + t11421 + t11424 + t11436 + t11387 + t11392 + t11393 + t11394;
  t11653 = 6.4*t10199;
  t11654 = 6.4*t2148*t5865;
  t11655 = Power(t5865,2);
  t11656 = 6.4*t11655;
  t11657 = 6.4*t2228*t8902;
  t11395 = t11387 + t11392 + t11393 + t11394;
  t11724 = t11653 + t11654 + t11656 + t11657;
  t11738 = -0.5*var2[4]*t11724;
  t11605 = t11491 + t11515 + t11516 + t11518 + t11568 + t11569 + t11570 + t11571;
  t11810 = 6.4*t11198;
  t11811 = 6.4*t8787*t8856;
  t11812 = Power(t8856,2);
  t11815 = 6.4*t11812;
  t11816 = 6.4*t8765*t8926;
  t11572 = t11568 + t11569 + t11570 + t11571;
  t11817 = t11810 + t11811 + t11815 + t11816;
  t11822 = -0.5*var2[6]*t11817;
  t11836 = 13.6*t6718*t6820;
  t11837 = 13.6*t6718*t6899;
  t11863 = 13.6*t7939*t8209;
  t11864 = 13.6*t7939*t8383;
  t11861 = 6.4*t5249*t2228;
  t11862 = 6.4*t2148*t2902;
  t11865 = 6.4*t8753*t8765;
  t11866 = 6.4*t8787*t8790;
  t11867 = t11836 + t11837 + t11861 + t11862 + t11863 + t11864 + t11865 + t11866;
  t11859 = t11836 + t11837 + t2236 + t5933;
  t11834 = t2236 + t5933;
  t11871 = t11863 + t11864 + t8842 + t8857;
  t11869 = t8842 + t8857;
  t11892 = -1.*t243;
  t11893 = 1. + t11892;
  t11894 = 0.4*t11893;
  t11896 = 0.64*t243;
  t11897 = t11894 + t11896;
  t11898 = t11897*t313;
  t11900 = 0.24*t357*t1002;
  t11901 = t11898 + t11900;
  t11903 = t357*t11897;
  t11925 = -0.24*t313*t1002;
  t11926 = t11903 + t11925;
  t11930 = -1.*t11897*t313;
  t11931 = -0.24*t357*t1002;
  t11932 = t11930 + t11931;
  t11902 = -1.*t11901*t2139;
  t11927 = -1.*t2189*t11926;
  t11928 = t11902 + t11927;
  t11929 = 3.2*t5249*t11928;
  t11934 = t11901*t2139;
  t11935 = t2189*t11926;
  t11939 = t11901*t1845;
  t11940 = t2139*t11926;
  t11941 = t11939 + t11940;
  t11942 = 3.2*t11941*t5970;
  t11975 = -0.24*t243*t313;
  t11976 = t11975 + t11931;
  t11950 = -1.*t2189*t11901;
  t11978 = 0.24*t357*t243;
  t11984 = t11978 + t11925;
  t11962 = -1.*t11926*t5826;
  t11881 = Power(t357,2);
  t11882 = 0.11*t11881;
  t11883 = Power(t313,2);
  t11888 = 0.11*t11883;
  t11889 = t11882 + t11888;
  t11891 = 6.8*t6870*t11889;
  t12023 = -1.*t8418;
  t12024 = 1. + t12023;
  t12025 = 0.4*t12024;
  t12026 = 0.64*t8418;
  t12027 = t12025 + t12026;
  t12028 = t12027*t7784;
  t12029 = 0.24*t7182*t8552;
  t12030 = t12028 + t12029;
  t12039 = t7182*t12027;
  t12043 = -0.24*t7784*t8552;
  t12044 = t12039 + t12043;
  t12017 = Power(t7182,2);
  t12018 = 0.11*t12017;
  t12019 = Power(t7784,2);
  t12020 = 0.11*t12019;
  t12021 = t12018 + t12020;
  t12022 = 6.8*t8304*t12021;
  t12035 = -1.*t12030*t8728;
  t12045 = -1.*t8714*t12044;
  t12046 = t12035 + t12045;
  t12048 = t12030*t8784;
  t12049 = t8728*t12044;
  t12050 = t12048 + t12049;
  t12060 = -1.*t12027*t7784;
  t12061 = -0.24*t7182*t8552;
  t12062 = t12060 + t12061;
  t12059 = 3.2*t8753*t12046;
  t12073 = t12030*t8728;
  t12074 = t8714*t12044;
  t12090 = 3.2*t12050*t8859;
  t12104 = -0.24*t8418*t7784;
  t12105 = t12104 + t12061;
  t12092 = -1.*t8714*t12030;
  t12107 = 0.24*t7182*t8418;
  t12108 = t12107 + t12043;
  t12096 = -1.*t12044*t8848;
  t11933 = t11932*t2139;
  t11936 = t1845*t11926;
  t11937 = t11933 + t11934 + t11935 + t11936;
  t11938 = 3.2*t5249*t11937;
  t11943 = -1.*t2189*t11932;
  t11954 = -1.*t2139*t11926;
  t11968 = t11943 + t11950 + t11954 + t11962;
  t11972 = 3.2*t2902*t11968;
  t11973 = t11891 + t11929 + t11938 + t11942 + t11972;
  t12137 = -1.*t357*t11897;
  t12143 = 0.24*t313*t1002;
  t12144 = t12137 + t12143;
  t12131 = 3.2*t11928*t5865;
  t11977 = t11976*t2139;
  t11988 = t1845*t11984;
  t11989 = t11977 + t11934 + t11935 + t11988;
  t12133 = 3.2*t11941*t8902;
  t12136 = -1.*t1845*t11926;
  t12147 = -1.*t11901*t5826;
  t11994 = -1.*t2189*t11976;
  t12004 = -1.*t2139*t11984;
  t12005 = t11994 + t11950 + t12004 + t11962;
  t12153 = t2189*t11901;
  t12166 = -0.24*t357*t243;
  t12167 = t12166 + t12143;
  t12157 = t11926*t5826;
  t11990 = 3.2*t5249*t11989;
  t12006 = 3.2*t2902*t12005;
  t12007 = t11929 + t11990 + t11942 + t12006;
  t12162 = 3.2*t11937*t5865;
  t12163 = 3.2*t11989*t5865;
  t12164 = -1.*t11976*t2139;
  t12165 = -1.*t2189*t11984;
  t12168 = -1.*t2189*t12167;
  t12169 = -1.*t11932*t5826;
  t12170 = -1.*t11976*t5826;
  t12171 = t12164 + t11927 + t12136 + t12165 + t12168 + t12169 + t12170 + t12147;
  t12172 = 3.2*t2148*t12171;
  t12173 = 3.2*t2228*t11968;
  t12174 = 3.2*t2228*t12005;
  t12175 = t2189*t11932;
  t12176 = t2189*t11976;
  t12177 = t11976*t1845;
  t12178 = t2139*t11984;
  t12179 = t2139*t12167;
  t12180 = t12175 + t12176 + t12153 + t12177 + t11940 + t12178 + t12179 + t12157;
  t12181 = 3.2*t2228*t12180;
  t12182 = t12131 + t12162 + t12163 + t12133 + t12172 + t12173 + t12174 + t12181;
  t12069 = t12062*t8728;
  t12075 = t8784*t12044;
  t12079 = t12069 + t12073 + t12074 + t12075;
  t12089 = 3.2*t8753*t12079;
  t12091 = -1.*t8714*t12062;
  t12095 = -1.*t8728*t12044;
  t12100 = t12091 + t12092 + t12095 + t12096;
  t12101 = 3.2*t8790*t12100;
  t12102 = t12022 + t12059 + t12089 + t12090 + t12101;
  t12209 = -1.*t7182*t12027;
  t12210 = 0.24*t7784*t8552;
  t12211 = t12209 + t12210;
  t12203 = 3.2*t12046*t8856;
  t12106 = t12105*t8728;
  t12109 = t8784*t12108;
  t12110 = t12106 + t12073 + t12074 + t12109;
  t12205 = 3.2*t12050*t8926;
  t12208 = -1.*t8784*t12044;
  t12214 = -1.*t12030*t8848;
  t12112 = -1.*t8714*t12105;
  t12113 = -1.*t8728*t12108;
  t12114 = t12112 + t12092 + t12113 + t12096;
  t12219 = t8714*t12030;
  t12232 = -0.24*t7182*t8418;
  t12233 = t12232 + t12210;
  t12223 = t12044*t8848;
  t12111 = 3.2*t8753*t12110;
  t12115 = 3.2*t8790*t12114;
  t12120 = t12059 + t12111 + t12090 + t12115;
  t12228 = 3.2*t12079*t8856;
  t12229 = 3.2*t12110*t8856;
  t12230 = -1.*t12105*t8728;
  t12231 = -1.*t8714*t12108;
  t12234 = -1.*t8714*t12233;
  t12235 = -1.*t12062*t8848;
  t12236 = -1.*t12105*t8848;
  t12237 = t12230 + t12045 + t12208 + t12231 + t12234 + t12235 + t12236 + t12214;
  t12238 = 3.2*t8787*t12237;
  t12239 = 3.2*t8765*t12100;
  t12240 = 3.2*t8765*t12114;
  t12241 = t8714*t12062;
  t12242 = t8714*t12105;
  t12243 = t12105*t8784;
  t12244 = t8728*t12108;
  t12245 = t8728*t12233;
  t12246 = t12241 + t12242 + t12219 + t12243 + t12049 + t12244 + t12245 + t12223;
  t12247 = 3.2*t8765*t12246;
  t12248 = t12203 + t12228 + t12229 + t12205 + t12238 + t12239 + t12240 + t12247;
  t12269 = 3.2*t2228*t11928;
  t12271 = 3.2*t11941*t5865;
  t12268 = 6.8*t6899*t11889;
  t12282 = 6.8*t8383*t12021;
  t12287 = 3.2*t8765*t12046;
  t12289 = 3.2*t12050*t8856;
  t12279 = -2.88*t1940;
  t12280 = 3.2*t2902*t11928;
  t12281 = 3.2*t5249*t11941;
  t12283 = 3.2*t8790*t12046;
  t12284 = 3.2*t8753*t12050;
  t12285 = t12279 + t12268 + t12280 + t12281 + t12282 + t12283 + t12284;
  t12270 = 3.2*t2228*t11937;
  t12272 = 3.2*t2148*t11968;
  t12273 = t12268 + t12269 + t12270 + t12271 + t12272;
  t12275 = 3.2*t2228*t11989;
  t12276 = 3.2*t2148*t12005;
  t12277 = t12269 + t12275 + t12271 + t12276;
  t12288 = 3.2*t8765*t12079;
  t12290 = 3.2*t8787*t12100;
  t12291 = t12282 + t12287 + t12288 + t12289 + t12290;
  t12293 = 3.2*t8765*t12110;
  t12294 = 3.2*t8787*t12114;
  t12295 = t12287 + t12293 + t12289 + t12294;
  t12303 = 0.748*t6870;
  t12304 = t11897*t1002;
  t12305 = -0.24*t243*t1002;
  t12306 = t12304 + t12305;
  t12308 = t11897*t243;
  t12309 = Power(t1002,2);
  t12310 = 0.24*t12309;
  t12311 = t12308 + t12310;
  t12315 = 3.2*t12306*t5249;
  t12316 = 3.2*t12311*t5970;
  t12317 = t12303 + t12315 + t12316;
  t12323 = Power(t243,2);
  t12324 = -0.24*t12323;
  t12325 = t12308 + t12324;
  t12332 = 3.2*t12306*t5865;
  t12319 = -1.*t11897*t1002;
  t12320 = 0.24*t243*t1002;
  t12321 = t12319 + t12320;
  t12333 = 3.2*t12311*t8902;
  t12322 = 3.2*t12321*t5249;
  t12326 = 3.2*t12325*t2902;
  t12327 = t12315 + t12322 + t12326 + t12316;
  t12336 = 3.2*t12325*t2228;
  t12337 = 3.2*t12321*t5865;
  t12338 = t12336 + t12332 + t12337 + t12333;
  t12355 = 0.748*t6899;
  t12360 = 3.2*t12306*t2228;
  t12361 = 3.2*t12311*t5865;
  t12356 = 3.2*t12311*t5249;
  t12357 = 3.2*t12306*t2902;
  t12358 = t12355 + t12356 + t12357;
  t12362 = t12355 + t12360 + t12361;
  t12364 = 3.2*t12325*t2148;
  t12365 = 3.2*t12321*t2228;
  t12366 = t12364 + t12360 + t12365 + t12361;
  t12377 = -0.384*var2[2]*t5970;
  t12378 = -0.384*var2[3]*t8902;
  t12379 = -0.384*var2[4]*t8902;
  t12380 = t12377 + t12378 + t12379;
  t12381 = var2[1]*t12380;
  t12387 = -0.384*var2[1]*t5865;
  t12388 = 0.748*t8304;
  t12389 = t12027*t8552;
  t12390 = -0.24*t8418*t8552;
  t12391 = t12389 + t12390;
  t12393 = t12027*t8418;
  t12394 = Power(t8552,2);
  t12395 = 0.24*t12394;
  t12396 = t12393 + t12395;
  t12400 = 3.2*t12391*t8753;
  t12401 = 3.2*t12396*t8859;
  t12402 = t12388 + t12400 + t12401;
  t12408 = Power(t8418,2);
  t12409 = -0.24*t12408;
  t12410 = t12393 + t12409;
  t12417 = 3.2*t12391*t8856;
  t12404 = -1.*t12027*t8552;
  t12405 = 0.24*t8418*t8552;
  t12406 = t12404 + t12405;
  t12418 = 3.2*t12396*t8926;
  t12407 = 3.2*t12406*t8753;
  t12411 = 3.2*t12410*t8790;
  t12412 = t12400 + t12407 + t12411 + t12401;
  t12421 = 3.2*t12410*t8765;
  t12422 = 3.2*t12406*t8856;
  t12423 = t12421 + t12417 + t12422 + t12418;
  t12440 = 0.748*t8383;
  t12445 = 3.2*t12391*t8765;
  t12446 = 3.2*t12396*t8856;
  t12441 = 3.2*t12396*t8753;
  t12442 = 3.2*t12391*t8790;
  t12443 = t12440 + t12441 + t12442;
  t12447 = t12440 + t12445 + t12446;
  t12449 = 3.2*t12410*t8787;
  t12450 = 3.2*t12406*t8765;
  t12451 = t12449 + t12445 + t12450 + t12446;
  t12462 = -0.384*var2[2]*t8859;
  t12463 = -0.384*var2[5]*t8926;
  t12464 = -0.384*var2[6]*t8926;
  t12465 = t12462 + t12463 + t12464;
  t12466 = var2[1]*t12465;
  t12472 = -0.384*var2[1]*t8856;
  p_output1[0]=var2[1]*(-0.5*(9.6*t2148*t2902 + 9.6*t2228*t5249 + t6844 + t6881 + t6937 + t6941 + 3.2*t2785*t7031 + 3.2*t5659*t7172 + t8242 + t8306 + t8397 + t8408 + 9.6*t8753*t8765 + 9.6*t8787*t8790 + 3.2*t8807*t8810 + 3.2*t8817*t8822)*var2[2] - 0.5*t6943*var2[3] - 0.5*t6554*var2[4] - 0.5*t8873*var2[5] - 0.5*t8871*var2[6]);
  p_output1[1]=var2[1]*(t8909 - 0.5*t6943*var2[2] - 0.5*(t6844 + t6881 + t6937 + t6941 + t8896 + t8898 + t8900 + t8905 + t8906 + t8907)*var2[3]);
  p_output1[2]=var2[1]*(t8909 - 0.5*t6554*var2[2] - 0.5*t8908*var2[3]);
  p_output1[3]=var2[1]*(t8945 - 0.5*t8873*var2[2] - 0.5*(t8242 + t8306 + t8397 + t8408 + t8922 + t8923 + t8925 + t8927 + t8928 + t8929)*var2[5]);
  p_output1[4]=var2[1]*(t8945 - 0.5*t8871*var2[2] - 0.5*t8930*var2[5]);
  p_output1[5]=-0.5*t11215*var2[2] - 0.5*t10149*var2[3] - 0.5*t9978*var2[4] - 0.5*t11278*var2[5] - 0.5*t11268*var2[6];
  p_output1[6]=-0.5*t11215*var2[1];
  p_output1[7]=-0.5*t10149*var2[1];
  p_output1[8]=-0.5*t9978*var2[1];
  p_output1[9]=-0.5*t11278*var2[1];
  p_output1[10]=-0.5*t11268*var2[1];
  p_output1[11]=var2[1]*(-0.5*(t11407 + t11421 + t11424 + t11436 + t11491 + t11515 + t11516 + t11518 + 6.4*Power(t2902,2) + 6.4*Power(t5249,2) + 6.4*t2228*t7031 + 6.4*t2148*t7172 + 6.4*Power(t8753,2) + 6.4*Power(t8790,2) + 6.4*t8765*t8810 + 6.4*t8787*t8817)*var2[2] - 0.5*t11438*var2[3] - 0.5*t11395*var2[4] - 0.5*t11605*var2[5] - 0.5*t11572*var2[6]);
  p_output1[12]=var2[1]*(t11738 - 0.5*t11438*var2[2] - 0.5*(t11407 + t11421 + t11424 + t11436 + t11653 + t11654 + t11656 + t11657)*var2[3]);
  p_output1[13]=var2[1]*(t11738 - 0.5*t11395*var2[2] - 0.5*t11724*var2[3]);
  p_output1[14]=var2[1]*(t11822 - 0.5*t11605*var2[2] - 0.5*(t11491 + t11515 + t11516 + t11518 + t11810 + t11811 + t11815 + t11816)*var2[5]);
  p_output1[15]=var2[1]*(t11822 - 0.5*t11572*var2[2] - 0.5*t11817*var2[5]);
  p_output1[16]=-0.5*t11867*var2[2] - 0.5*t11859*var2[3] - 0.5*t11834*var2[4] - 0.5*t11871*var2[5] - 0.5*t11869*var2[6];
  p_output1[17]=-0.5*t11867*var2[1];
  p_output1[18]=-0.5*t11859*var2[1];
  p_output1[19]=-0.5*t11834*var2[1];
  p_output1[20]=-0.5*t11871*var2[1];
  p_output1[21]=-0.5*t11869*var2[1];
  p_output1[22]=var2[1]*(-0.5*(t11891 + t12022 + 2.88*t144 + 3.2*t11941*t7031 + 3.2*t11928*t7172 + 3.2*t12050*t8810 + 3.2*t12046*t8817)*var2[2] - 0.5*t11973*var2[3] - 0.5*t12007*var2[4] - 0.5*t12102*var2[5] - 0.5*t12120*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t11973*var2[2] - 0.5*(t11891 + t12131 + t12133 + 6.4*t11968*t2228 + 3.2*(t12153 + t12157 + t11932*t1845 + 2.*t11926*t2139 + t12144*t2139 + 2.*t11932*t2189)*t2228 + 3.2*t2148*(t12136 + t12147 - 1.*t11932*t2139 - 2.*t11926*t2189 - 1.*t12144*t2189 - 2.*t11932*t5826) + 6.4*t11937*t5865)*var2[3] - 0.5*t12182*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t12007*var2[2] - 0.5*t12182*var2[3] - 0.5*(t12131 + t12133 + 6.4*t12005*t2228 + 3.2*(t12153 + t12157 + t12177 + t12179 + 2.*t11984*t2139 + 2.*t11976*t2189)*t2228 + 3.2*t2148*(t12136 + t12147 + t12164 + t12168 - 2.*t11984*t2189 - 2.*t11976*t5826) + 6.4*t11989*t5865)*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t12102*var2[2] - 0.5*(t12022 + t12203 + t12205 + 6.4*t12100*t8765 + 3.2*t8765*(t12219 + t12223 + 2.*t12062*t8714 + 2.*t12044*t8728 + t12211*t8728 + t12062*t8784) + 3.2*t8787*(t12208 + t12214 - 2.*t12044*t8714 - 1.*t12211*t8714 - 1.*t12062*t8728 - 2.*t12062*t8848) + 6.4*t12079*t8856)*var2[5] - 0.5*t12248*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t12120*var2[2] - 0.5*t12248*var2[5] - 0.5*(t12203 + t12205 + 6.4*t12114*t8765 + 3.2*(t12219 + t12223 + t12243 + t12245 + 2.*t12105*t8714 + 2.*t12108*t8728)*t8765 + 3.2*t8787*(t12208 + t12214 + t12230 + t12234 - 2.*t12108*t8714 - 2.*t12105*t8848) + 6.4*t12110*t8856)*var2[6]);
  p_output1[27]=-0.5*t12285*var2[2] - 0.5*t12273*var2[3] - 0.5*t12277*var2[4] - 0.5*t12291*var2[5] - 0.5*t12295*var2[6];
  p_output1[28]=-0.5*t12285*var2[1];
  p_output1[29]=-0.5*t12273*var2[1];
  p_output1[30]=-0.5*t12277*var2[1];
  p_output1[31]=-0.5*t12291*var2[1];
  p_output1[32]=-0.5*t12295*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t12303 + 3.2*t12311*t7031 + 3.2*t12306*t7172)*var2[2] - 0.5*t12317*var2[3] - 0.5*t12327*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t12317*var2[2] - 0.5*(t12303 + t12332 + t12333)*var2[3] - 0.5*t12338*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t12327*var2[2] - 0.5*t12338*var2[3] - 0.5*(t12332 + t12333 + 3.2*t12321*t2148 + 6.4*t12325*t2228 + 3.2*t2228*(0.24*t12323 - 1.*t11897*t243) + 6.4*t12321*t5865)*var2[4]);
  p_output1[36]=-0.5*t12358*var2[2] - 0.5*t12362*var2[3] - 0.5*t12366*var2[4];
  p_output1[37]=-0.5*t12358*var2[1];
  p_output1[38]=-0.5*t12362*var2[1];
  p_output1[39]=-0.5*t12366*var2[1];
  p_output1[40]=var2[1]*(-0.384*t7031*var2[2] - 0.384*t5970*var2[3] - 0.384*t5970*var2[4]);
  p_output1[41]=t12381;
  p_output1[42]=t12381;
  p_output1[43]=-0.384*t5249*var2[2] - 0.384*t5865*var2[3] - 0.384*t5865*var2[4];
  p_output1[44]=-0.384*t5249*var2[1];
  p_output1[45]=t12387;
  p_output1[46]=t12387;
  p_output1[47]=var2[1]*(-0.5*(t12388 + 3.2*t12396*t8810 + 3.2*t12391*t8817)*var2[2] - 0.5*t12402*var2[5] - 0.5*t12412*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t12402*var2[2] - 0.5*(t12388 + t12417 + t12418)*var2[5] - 0.5*t12423*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t12412*var2[2] - 0.5*t12423*var2[5] - 0.5*(t12417 + t12418 + 6.4*t12410*t8765 + 3.2*(0.24*t12408 - 1.*t12027*t8418)*t8765 + 3.2*t12406*t8787 + 6.4*t12406*t8856)*var2[6]);
  p_output1[50]=-0.5*t12443*var2[2] - 0.5*t12447*var2[5] - 0.5*t12451*var2[6];
  p_output1[51]=-0.5*t12443*var2[1];
  p_output1[52]=-0.5*t12447*var2[1];
  p_output1[53]=-0.5*t12451*var2[1];
  p_output1[54]=var2[1]*(-0.384*t8810*var2[2] - 0.384*t8859*var2[5] - 0.384*t8859*var2[6]);
  p_output1[55]=t12466;
  p_output1[56]=t12466;
  p_output1[57]=-0.384*t8753*var2[2] - 0.384*t8856*var2[5] - 0.384*t8856*var2[6];
  p_output1[58]=-0.384*t8753*var2[1];
  p_output1[59]=t12472;
  p_output1[60]=t12472;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace Times[step, Pattern[Rabbit, Blank[]]]
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
