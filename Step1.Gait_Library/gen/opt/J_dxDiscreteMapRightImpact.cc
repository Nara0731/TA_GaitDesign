/*
 * Automatically Generated from Mathematica.
 * Tue 17 Sep 2019 23:17:57 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1229;
  double t1215;
  double t1237;
  double t1241;
  double t1293;
  double t1295;
  double t1300;
  double t1302;
  double t1303;
  double t1320;
  double t1322;
  double t1335;
  double t1349;
  double t1374;
  double t1375;
  double t1707;
  double t1265;
  double t1273;
  double t1275;
  double t1240;
  double t1243;
  double t1249;
  double t1294;
  double t1296;
  double t1297;
  double t1299;
  double t1305;
  double t1306;
  double t1309;
  double t1310;
  double t1311;
  double t1312;
  double t1313;
  double t1314;
  double t1329;
  double t1330;
  double t1331;
  double t1321;
  double t1323;
  double t1324;
  double t1348;
  double t1350;
  double t1351;
  double t1354;
  double t1725;
  double t1831;
  double t2627;
  double t2819;
  double t2971;
  double t2988;
  double t3130;
  double t3172;
  double t16380;
  double t16381;
  double t16385;
  double t16392;
  double t16393;
  double t16396;
  double t16407;
  double t16408;
  double t16419;
  double t16426;
  double t16427;
  double t16457;
  double t16463;
  double t16464;
  double t16473;
  double t16477;
  double t16483;
  double t16484;
  double t16488;
  double t16490;
  double t16491;
  double t16496;
  double t7783;
  double t10765;
  double t11468;
  double t5748;
  double t5875;
  double t7178;
  double t16563;
  double t16564;
  double t16565;
  double t16263;
  double t16265;
  double t16542;
  double t16549;
  double t16554;
  double t16557;
  double t16331;
  double t16332;
  double t16334;
  double t16270;
  double t16314;
  double t16322;
  double t16515;
  double t16516;
  double t16517;
  double t16339;
  double t16349;
  double t16510;
  double t16511;
  double t16512;
  double t16513;
  double t1276;
  double t1333;
  double t16358;
  double t16368;
  double t16369;
  double t16374;
  double t16377;
  double t16411;
  double t16430;
  double t16431;
  double t16433;
  double t16434;
  double t16435;
  double t16439;
  double t16440;
  double t16441;
  double t16442;
  double t16443;
  double t16489;
  double t16497;
  double t16502;
  double t16504;
  double t16505;
  double t16506;
  double t16569;
  double t16570;
  double t16572;
  double t16573;
  double t16574;
  double t16659;
  double t16660;
  double t16661;
  double t16662;
  double t16663;
  double t16591;
  double t16592;
  double t16593;
  double t16594;
  double t16603;
  double t16604;
  double t16605;
  double t16606;
  double t16607;
  double t16608;
  double t16609;
  double t16610;
  double t16611;
  double t16612;
  double t16615;
  double t16647;
  double t16648;
  double t16650;
  double t16682;
  double t16683;
  double t16684;
  double t16664;
  double t16665;
  double t16666;
  double t16669;
  double t16670;
  double t16673;
  double t16674;
  double t16675;
  double t16676;
  double t16677;
  double t16678;
  double t16681;
  double t16686;
  double t16687;
  double t16691;
  double t16715;
  double t16716;
  double t16693;
  double t16718;
  double t16719;
  double t16695;
  double t16579;
  double t16582;
  double t16584;
  double t16585;
  double t16586;
  double t16730;
  double t16731;
  double t16732;
  double t16733;
  double t16734;
  double t16597;
  double t16598;
  double t16626;
  double t16627;
  double t16628;
  double t16629;
  double t16630;
  double t16631;
  double t16632;
  double t16633;
  double t16634;
  double t16653;
  double t16753;
  double t16754;
  double t16755;
  double t16735;
  double t16736;
  double t16737;
  double t16740;
  double t16741;
  double t16744;
  double t16745;
  double t16746;
  double t16747;
  double t16748;
  double t16749;
  double t16752;
  double t16757;
  double t16758;
  double t16762;
  double t16786;
  double t16787;
  double t16764;
  double t16789;
  double t16790;
  double t16766;
  double t1216;
  double t1230;
  double t1263;
  double t1307;
  double t1318;
  double t1325;
  double t2010;
  double t3180;
  double t7213;
  double t7243;
  double t16249;
  double t16268;
  double t16323;
  double t16328;
  double t16335;
  double t16350;
  double t16353;
  double t1222;
  double t1236;
  double t1292;
  double t16619;
  double t16621;
  double t1334;
  double t16638;
  double t16640;
  double t16616;
  double t16617;
  double t16623;
  double t16624;
  double t16635;
  double t16636;
  double t16642;
  double t16643;
  double t16618;
  double t16620;
  double t16622;
  double t16625;
  double t16637;
  double t16639;
  double t16641;
  double t16644;
  double t16645;
  double t16355;
  double t16863;
  double t16874;
  double t16679;
  double t16883;
  double t16685;
  double t16688;
  double t16689;
  double t16692;
  double t16694;
  double t16696;
  double t16892;
  double t16705;
  double t16706;
  double t16707;
  double t16893;
  double t16701;
  double t16702;
  double t16703;
  double t16894;
  double t16897;
  double t16898;
  double t16713;
  double t16902;
  double t16717;
  double t16720;
  double t16721;
  double t16904;
  double t16723;
  double t16724;
  double t16725;
  double t16869;
  double t16877;
  double t16750;
  double t16886;
  double t16756;
  double t16759;
  double t16760;
  double t16763;
  double t16765;
  double t16767;
  double t16921;
  double t16776;
  double t16777;
  double t16778;
  double t16922;
  double t16772;
  double t16773;
  double t16774;
  double t16923;
  double t16926;
  double t16927;
  double t16784;
  double t16931;
  double t16788;
  double t16791;
  double t16792;
  double t16933;
  double t16794;
  double t16795;
  double t16796;
  double t16810;
  double t16811;
  double t16812;
  double t16813;
  double t16814;
  double t16815;
  double t16816;
  double t16817;
  double t16818;
  double t16801;
  double t16802;
  double t16649;
  double t16651;
  double t16652;
  double t16654;
  double t16655;
  double t16656;
  double t16575;
  double t16576;
  double t16577;
  double t16587;
  double t16588;
  double t16589;
  double t16378;
  double t16432;
  double t16438;
  double t16453;
  double t16503;
  double t16507;
  double t16508;
  double t16844;
  double t16845;
  double t16846;
  double t16847;
  double t16848;
  double t16849;
  double t16850;
  double t16851;
  double t16884;
  double t16885;
  double t16887;
  double t16888;
  double t16889;
  double t16978;
  double t16979;
  double t16980;
  double t16981;
  double t16982;
  double t16983;
  double t16984;
  double t16985;
  double t16986;
  double t16987;
  double t16988;
  double t16989;
  double t16990;
  double t16991;
  double t16992;
  double t16993;
  double t16903;
  double t16905;
  double t16906;
  double t16690;
  double t16697;
  double t16698;
  double t16916;
  double t16917;
  double t16918;
  double t16722;
  double t16726;
  double t16727;
  double t16932;
  double t16934;
  double t16935;
  double t16761;
  double t16768;
  double t16769;
  double t16945;
  double t16946;
  double t16947;
  double t16793;
  double t16797;
  double t16798;
  double t16819;
  double t16820;
  double t16821;
  double t16822;
  double t16823;
  double t16824;
  double t16825;
  double t16826;
  double t16953;
  double t16955;
  double t16957;
  double t16959;
  double t16961;
  double t16963;
  double t17011;
  double t16538;
  double t16562;
  double t16566;
  double t16567;
  double t16857;
  double t16858;
  double t16859;
  double t16860;
  double t16972;
  double t16973;
  double t16974;
  double t16975;
  double t16864;
  double t16865;
  double t16866;
  double t16895;
  double t16667;
  double t16998;
  double t16999;
  double t17000;
  double t17010;
  double t17012;
  double t17013;
  double t17014;
  double t17015;
  double t17016;
  double t17017;
  double t17018;
  double t17019;
  double t17020;
  double t17021;
  double t17022;
  double t17023;
  double t16909;
  double t16910;
  double t16911;
  double t16704;
  double t16708;
  double t16709;
  double t17024;
  double t17025;
  double t17026;
  double t17027;
  double t17028;
  double t16827;
  double t16828;
  double t16829;
  double t16830;
  double t17070;
  double t17071;
  double t17072;
  double t17073;
  double t17092;
  double t17094;
  double t17082;
  double t17083;
  double t17084;
  double t17085;
  double t17086;
  double t17087;
  double t17088;
  double t17089;
  double t17090;
  double t17091;
  double t16568;
  double t16861;
  double t16976;
  double t16977;
  double t17097;
  double t17098;
  double t17124;
  double t17125;
  double t16831;
  double t16951;
  double t17074;
  double t17075;
  double t17118;
  double t17119;
  double t17129;
  double t16509;
  double t16514;
  double t16526;
  double t16527;
  double t16852;
  double t16853;
  double t16854;
  double t16855;
  double t16966;
  double t16967;
  double t16968;
  double t16969;
  double t16870;
  double t16871;
  double t16872;
  double t16924;
  double t16738;
  double t17038;
  double t17039;
  double t17040;
  double t16938;
  double t16939;
  double t16940;
  double t16775;
  double t16779;
  double t16780;
  double t17050;
  double t17051;
  double t17052;
  double t17053;
  double t17054;
  double t16832;
  double t16833;
  double t16834;
  double t16835;
  double t17076;
  double t17077;
  double t17078;
  double t17079;
  double t17150;
  double t17152;
  double t16531;
  double t16856;
  double t16970;
  double t16971;
  double t17155;
  double t17156;
  double t17182;
  double t17183;
  double t16836;
  double t16952;
  double t17080;
  double t17081;
  double t17176;
  double t17177;
  t1229 = Sin(var2[2]);
  t1215 = Cos(var2[2]);
  t1237 = Cos(var2[3]);
  t1241 = Sin(var2[3]);
  t1293 = Cos(var2[4]);
  t1295 = Sin(var2[4]);
  t1300 = t1237*t1293;
  t1302 = -1.*t1241*t1295;
  t1303 = t1300 + t1302;
  t1320 = Cos(var2[5]);
  t1322 = Sin(var2[5]);
  t1335 = Cos(var2[6]);
  t1349 = Sin(var2[6]);
  t1374 = t1320*t1335;
  t1375 = -1.*t1322*t1349;
  t1707 = t1374 + t1375;
  t1265 = t1215*t1237;
  t1273 = -1.*t1229*t1241;
  t1275 = t1265 + t1273;
  t1240 = t1237*t1229;
  t1243 = t1215*t1241;
  t1249 = t1240 + t1243;
  t1294 = -1.*t1293*t1241;
  t1296 = -1.*t1237*t1295;
  t1297 = t1294 + t1296;
  t1299 = t1229*t1297;
  t1305 = t1215*t1303;
  t1306 = t1299 + t1305;
  t1309 = t1293*t1241;
  t1310 = t1237*t1295;
  t1311 = t1309 + t1310;
  t1312 = t1215*t1311;
  t1313 = t1229*t1303;
  t1314 = t1312 + t1313;
  t1329 = t1215*t1320;
  t1330 = -1.*t1229*t1322;
  t1331 = t1329 + t1330;
  t1321 = t1320*t1229;
  t1323 = t1215*t1322;
  t1324 = t1321 + t1323;
  t1348 = -1.*t1335*t1322;
  t1350 = -1.*t1320*t1349;
  t1351 = t1348 + t1350;
  t1354 = t1229*t1351;
  t1725 = t1215*t1707;
  t1831 = t1354 + t1725;
  t2627 = t1335*t1322;
  t2819 = t1320*t1349;
  t2971 = t2627 + t2819;
  t2988 = t1215*t2971;
  t3130 = t1229*t1707;
  t3172 = t2988 + t3130;
  t16380 = -1.*t1293;
  t16381 = 1. + t16380;
  t16385 = 0.4*t16381;
  t16392 = 0.64*t1293;
  t16393 = t16385 + t16392;
  t16396 = t16393*t1241;
  t16407 = 0.24*t1237*t1295;
  t16408 = t16396 + t16407;
  t16419 = t1237*t16393;
  t16426 = -0.24*t1241*t1295;
  t16427 = t16419 + t16426;
  t16457 = -1.*t1335;
  t16463 = 1. + t16457;
  t16464 = 0.4*t16463;
  t16473 = 0.64*t1335;
  t16477 = t16464 + t16473;
  t16483 = t16477*t1322;
  t16484 = 0.24*t1320*t1349;
  t16488 = t16483 + t16484;
  t16490 = t1320*t16477;
  t16491 = -0.24*t1322*t1349;
  t16496 = t16490 + t16491;
  t7783 = t1215*t1297;
  t10765 = -1.*t1229*t1303;
  t11468 = t7783 + t10765;
  t5748 = -1.*t1237*t1229;
  t5875 = -1.*t1215*t1241;
  t7178 = t5748 + t5875;
  t16563 = t16393*t1295;
  t16564 = -0.24*t1293*t1295;
  t16565 = t16563 + t16564;
  t16263 = -1.*t1229*t1311;
  t16265 = t16263 + t1305;
  t16542 = t16393*t1293;
  t16549 = Power(t1295,2);
  t16554 = 0.24*t16549;
  t16557 = t16542 + t16554;
  t16331 = t1215*t1351;
  t16332 = -1.*t1229*t1707;
  t16334 = t16331 + t16332;
  t16270 = -1.*t1320*t1229;
  t16314 = -1.*t1215*t1322;
  t16322 = t16270 + t16314;
  t16515 = t16477*t1349;
  t16516 = -0.24*t1335*t1349;
  t16517 = t16515 + t16516;
  t16339 = -1.*t1229*t2971;
  t16349 = t16339 + t1725;
  t16510 = t16477*t1335;
  t16511 = Power(t1349,2);
  t16512 = 0.24*t16511;
  t16513 = t16510 + t16512;
  t1276 = Power(t1275,2);
  t1333 = Power(t1331,2);
  t16358 = Power(t1237,2);
  t16368 = 0.11*t16358;
  t16369 = Power(t1241,2);
  t16374 = 0.11*t16369;
  t16377 = t16368 + t16374;
  t16411 = -1.*t16408*t1303;
  t16430 = -1.*t1297*t16427;
  t16431 = t16411 + t16430;
  t16433 = t16408*t1311;
  t16434 = t1303*t16427;
  t16435 = t16433 + t16434;
  t16439 = Power(t1320,2);
  t16440 = 0.11*t16439;
  t16441 = Power(t1322,2);
  t16442 = 0.11*t16441;
  t16443 = t16440 + t16442;
  t16489 = -1.*t16488*t1707;
  t16497 = -1.*t1351*t16496;
  t16502 = t16489 + t16497;
  t16504 = t16488*t2971;
  t16505 = t1707*t16496;
  t16506 = t16504 + t16505;
  t16569 = -1.*var1[6];
  t16570 = var3[4] + t16569;
  t16572 = -1.*var1[5];
  t16573 = var3[3] + t16572;
  t16574 = 0.748*t7178;
  t16659 = -1.*t1237*t1293;
  t16660 = t1241*t1295;
  t16661 = t16659 + t16660;
  t16662 = t1229*t16661;
  t16663 = t7783 + t16662;
  t16591 = -1.*var1[0];
  t16592 = var3[0] + t16591;
  t16593 = 13.6*t7178*t1275;
  t16594 = 13.6*t1249*t1275;
  t16603 = -1.*var1[1];
  t16604 = var3[1] + t16603;
  t16605 = Power(t7178,2);
  t16606 = 6.8*t16605;
  t16607 = 6.8*t7178*t1249;
  t16608 = 6.8*t1276;
  t16609 = -1.*t1215*t1237;
  t16610 = t1229*t1241;
  t16611 = t16609 + t16610;
  t16612 = 6.8*t1275*t16611;
  t16615 = -1.*t1229*t1297;
  t16647 = -1.*var1[2];
  t16648 = var3[2] + t16647;
  t16650 = 6.8*t7178*t16377;
  t16682 = -1.*t16393*t1241;
  t16683 = -0.24*t1237*t1295;
  t16684 = t16682 + t16683;
  t16664 = 0.768*t16570*t16663;
  t16665 = 3.2*t16565*t1306;
  t16666 = 3.2*t16557*t16663;
  t16669 = 6.4*t1306*t1314;
  t16670 = 6.4*t1306*t16663;
  t16673 = 3.2*t1306*t16265;
  t16674 = 3.2*t11468*t1314;
  t16675 = t1215*t16661;
  t16676 = t16615 + t16675;
  t16677 = 3.2*t1306*t16676;
  t16678 = 3.2*t11468*t16663;
  t16681 = 3.2*t1306*t16431;
  t16686 = t16408*t1303;
  t16687 = t1297*t16427;
  t16691 = 3.2*t16435*t16663;
  t16715 = -0.24*t1293*t1241;
  t16716 = t16715 + t16683;
  t16693 = -1.*t1297*t16408;
  t16718 = 0.24*t1237*t1293;
  t16719 = t16718 + t16426;
  t16695 = -1.*t16427*t16661;
  t16579 = -1.*var1[4];
  t16582 = var3[6] + t16579;
  t16584 = -1.*var1[3];
  t16585 = var3[5] + t16584;
  t16586 = 0.748*t16322;
  t16730 = -1.*t1320*t1335;
  t16731 = t1322*t1349;
  t16732 = t16730 + t16731;
  t16733 = t1229*t16732;
  t16734 = t16331 + t16733;
  t16597 = 13.6*t16322*t1331;
  t16598 = 13.6*t1324*t1331;
  t16626 = Power(t16322,2);
  t16627 = 6.8*t16626;
  t16628 = 6.8*t16322*t1324;
  t16629 = 6.8*t1333;
  t16630 = -1.*t1215*t1320;
  t16631 = t1229*t1322;
  t16632 = t16630 + t16631;
  t16633 = 6.8*t1331*t16632;
  t16634 = -1.*t1229*t1351;
  t16653 = 6.8*t16322*t16443;
  t16753 = -1.*t16477*t1322;
  t16754 = -0.24*t1320*t1349;
  t16755 = t16753 + t16754;
  t16735 = 0.768*t16582*t16734;
  t16736 = 3.2*t16517*t1831;
  t16737 = 3.2*t16513*t16734;
  t16740 = 6.4*t1831*t3172;
  t16741 = 6.4*t1831*t16734;
  t16744 = 3.2*t1831*t16349;
  t16745 = 3.2*t16334*t3172;
  t16746 = t1215*t16732;
  t16747 = t16634 + t16746;
  t16748 = 3.2*t1831*t16747;
  t16749 = 3.2*t16334*t16734;
  t16752 = 3.2*t1831*t16502;
  t16757 = t16488*t1707;
  t16758 = t1351*t16496;
  t16762 = 3.2*t16506*t16734;
  t16786 = -0.24*t1335*t1322;
  t16787 = t16786 + t16754;
  t16764 = -1.*t1351*t16488;
  t16789 = 0.24*t1320*t1335;
  t16790 = t16789 + t16491;
  t16766 = -1.*t16496*t16732;
  t1216 = Power(t1215,2);
  t1230 = Power(t1229,2);
  t1263 = Power(t1249,2);
  t1307 = Power(t1306,2);
  t1318 = Power(t1314,2);
  t1325 = Power(t1324,2);
  t2010 = Power(t1831,2);
  t3180 = Power(t3172,2);
  t7213 = -6.8*t7178*t1275;
  t7243 = -6.8*t1249*t1275;
  t16249 = -3.2*t1306*t11468;
  t16268 = -3.2*t16265*t1314;
  t16323 = -6.8*t16322*t1331;
  t16328 = -6.8*t1324*t1331;
  t16335 = -3.2*t1831*t16334;
  t16350 = -3.2*t16349*t3172;
  t16353 = t7213 + t7243 + t16249 + t16268 + t16323 + t16328 + t16335 + t16350;
  t1222 = -12.*t1216;
  t1236 = -12.*t1230;
  t1292 = -6.8*t1276;
  t16619 = Power(t16265,2);
  t16621 = Power(t11468,2);
  t1334 = -6.8*t1333;
  t16638 = Power(t16349,2);
  t16640 = Power(t16334,2);
  t16616 = -1.*t1215*t1303;
  t16617 = t16615 + t16616;
  t16623 = -1.*t1215*t1311;
  t16624 = t16623 + t10765;
  t16635 = -1.*t1215*t1707;
  t16636 = t16634 + t16635;
  t16642 = -1.*t1215*t2971;
  t16643 = t16642 + t16332;
  t16618 = 3.2*t16617*t1306;
  t16620 = 3.2*t16619;
  t16622 = 3.2*t16621;
  t16625 = 3.2*t16624*t1314;
  t16637 = 3.2*t16636*t1831;
  t16639 = 3.2*t16638;
  t16641 = 3.2*t16640;
  t16644 = 3.2*t16643*t3172;
  t16645 = t16606 + t16607 + t16608 + t16612 + t16618 + t16620 + t16622 + t16625 + t16627 + t16628 + t16629 + t16633 + t16637 + t16639 + t16641 + t16644;
  t16355 = -2.88*t1215;
  t16863 = 0.748*t16611;
  t16874 = 13.6*t7178*t16611;
  t16679 = t16606 + t16607 + t16608 + t16612 + t16673 + t16674 + t16677 + t16678;
  t16883 = 6.8*t16611*t16377;
  t16685 = t16684*t1303;
  t16688 = t1311*t16427;
  t16689 = t16685 + t16686 + t16687 + t16688;
  t16692 = -1.*t1297*t16684;
  t16694 = -1.*t1303*t16427;
  t16696 = t16692 + t16693 + t16694 + t16695;
  t16892 = 0.768*t16570*t16676;
  t16705 = Power(t1293,2);
  t16706 = -0.24*t16705;
  t16707 = t16542 + t16706;
  t16893 = 3.2*t16565*t11468;
  t16701 = -1.*t16393*t1295;
  t16702 = 0.24*t1293*t1295;
  t16703 = t16701 + t16702;
  t16894 = 3.2*t16557*t16676;
  t16897 = 6.4*t16265*t11468;
  t16898 = 6.4*t11468*t16676;
  t16713 = t16673 + t16674 + t16677 + t16678;
  t16902 = 3.2*t11468*t16431;
  t16717 = t16716*t1303;
  t16720 = t1311*t16719;
  t16721 = t16717 + t16686 + t16687 + t16720;
  t16904 = 3.2*t16435*t16676;
  t16723 = -1.*t1297*t16716;
  t16724 = -1.*t1303*t16719;
  t16725 = t16723 + t16693 + t16724 + t16695;
  t16869 = 0.748*t16632;
  t16877 = 13.6*t16322*t16632;
  t16750 = t16627 + t16628 + t16629 + t16633 + t16744 + t16745 + t16748 + t16749;
  t16886 = 6.8*t16632*t16443;
  t16756 = t16755*t1707;
  t16759 = t2971*t16496;
  t16760 = t16756 + t16757 + t16758 + t16759;
  t16763 = -1.*t1351*t16755;
  t16765 = -1.*t1707*t16496;
  t16767 = t16763 + t16764 + t16765 + t16766;
  t16921 = 0.768*t16582*t16747;
  t16776 = Power(t1335,2);
  t16777 = -0.24*t16776;
  t16778 = t16510 + t16777;
  t16922 = 3.2*t16517*t16334;
  t16772 = -1.*t16477*t1349;
  t16773 = 0.24*t1335*t1349;
  t16774 = t16772 + t16773;
  t16923 = 3.2*t16513*t16747;
  t16926 = 6.4*t16349*t16334;
  t16927 = 6.4*t16334*t16747;
  t16784 = t16744 + t16745 + t16748 + t16749;
  t16931 = 3.2*t16334*t16502;
  t16788 = t16787*t1707;
  t16791 = t2971*t16790;
  t16792 = t16788 + t16757 + t16758 + t16791;
  t16933 = 3.2*t16506*t16747;
  t16794 = -1.*t1351*t16787;
  t16795 = -1.*t1707*t16790;
  t16796 = t16794 + t16764 + t16795 + t16766;
  t16810 = 6.8*t7178*t1275;
  t16811 = 6.8*t1249*t1275;
  t16812 = 3.2*t1306*t11468;
  t16813 = 3.2*t16265*t1314;
  t16814 = 6.8*t16322*t1331;
  t16815 = 6.8*t1324*t1331;
  t16816 = 3.2*t1831*t16334;
  t16817 = 3.2*t16349*t3172;
  t16818 = t16810 + t16811 + t16812 + t16813 + t16814 + t16815 + t16816 + t16817;
  t16801 = 12.*t1216;
  t16802 = 12.*t1230;
  t16649 = -2.88*t1229;
  t16651 = 3.2*t16265*t16431;
  t16652 = 3.2*t11468*t16435;
  t16654 = 3.2*t16349*t16502;
  t16655 = 3.2*t16334*t16506;
  t16656 = t16649 + t16650 + t16651 + t16652 + t16653 + t16654 + t16655;
  t16575 = 3.2*t16565*t16265;
  t16576 = 3.2*t16557*t11468;
  t16577 = t16574 + t16575 + t16576;
  t16587 = 3.2*t16517*t16349;
  t16588 = 3.2*t16513*t16334;
  t16589 = t16586 + t16587 + t16588;
  t16378 = -6.8*t1275*t16377;
  t16432 = -3.2*t1314*t16431;
  t16438 = -3.2*t1306*t16435;
  t16453 = -6.8*t1331*t16443;
  t16503 = -3.2*t3172*t16502;
  t16507 = -3.2*t1831*t16506;
  t16508 = t16355 + t16378 + t16432 + t16438 + t16453 + t16503 + t16507;
  t16844 = 2.88*t1229;
  t16845 = -6.8*t7178*t16377;
  t16846 = -3.2*t16265*t16431;
  t16847 = -3.2*t11468*t16435;
  t16848 = -6.8*t16322*t16443;
  t16849 = -3.2*t16349*t16502;
  t16850 = -3.2*t16334*t16506;
  t16851 = t16844 + t16845 + t16846 + t16847 + t16848 + t16849 + t16850;
  t16884 = 3.2*t16624*t16431;
  t16885 = 3.2*t16617*t16435;
  t16887 = 3.2*t16643*t16502;
  t16888 = 3.2*t16636*t16506;
  t16889 = t16355 + t16883 + t16884 + t16885 + t16886 + t16887 + t16888;
  t16978 = 0.4*t16381*t16611;
  t16979 = -0.4*t1249*t1295;
  t16980 = t1293*t16611;
  t16981 = t1249*t1295;
  t16982 = t16980 + t16981;
  t16983 = 0.8*t16982;
  t16984 = t16978 + t16979 + t16983;
  t16985 = -1.*var4[2]*t16984;
  t16986 = 0.4*t16381*t7178;
  t16987 = -0.4*t16611*t1295;
  t16988 = t1293*t7178;
  t16989 = t16611*t1295;
  t16990 = t16988 + t16989;
  t16991 = 0.8*t16990;
  t16992 = t16986 + t16987 + t16991;
  t16993 = -1.*var4[0]*t16992;
  t16903 = 3.2*t11468*t16689;
  t16905 = 3.2*t16265*t16696;
  t16906 = t16883 + t16902 + t16903 + t16904 + t16905;
  t16690 = 3.2*t1306*t16689;
  t16697 = 3.2*t1314*t16696;
  t16698 = t16650 + t16681 + t16690 + t16691 + t16697;
  t16916 = 3.2*t11468*t16721;
  t16917 = 3.2*t16265*t16725;
  t16918 = t16902 + t16916 + t16904 + t16917;
  t16722 = 3.2*t1306*t16721;
  t16726 = 3.2*t1314*t16725;
  t16727 = t16681 + t16722 + t16691 + t16726;
  t16932 = 3.2*t16334*t16760;
  t16934 = 3.2*t16349*t16767;
  t16935 = t16886 + t16931 + t16932 + t16933 + t16934;
  t16761 = 3.2*t1831*t16760;
  t16768 = 3.2*t3172*t16767;
  t16769 = t16653 + t16752 + t16761 + t16762 + t16768;
  t16945 = 3.2*t16334*t16792;
  t16946 = 3.2*t16349*t16796;
  t16947 = t16931 + t16945 + t16933 + t16946;
  t16793 = 3.2*t1831*t16792;
  t16797 = 3.2*t3172*t16796;
  t16798 = t16752 + t16793 + t16762 + t16797;
  t16819 = 2.88*t1215;
  t16820 = 6.8*t1275*t16377;
  t16821 = 3.2*t1314*t16431;
  t16822 = 3.2*t1306*t16435;
  t16823 = 6.8*t1331*t16443;
  t16824 = 3.2*t3172*t16502;
  t16825 = 3.2*t1831*t16506;
  t16826 = t16819 + t16820 + t16821 + t16822 + t16823 + t16824 + t16825;
  t16953 = Power(t16377,2);
  t16955 = Power(t16431,2);
  t16957 = Power(t16435,2);
  t16959 = Power(t16443,2);
  t16961 = Power(t16502,2);
  t16963 = Power(t16506,2);
  t17011 = 0.4*t7178*t1295;
  t16538 = -0.748*t1275;
  t16562 = -3.2*t16557*t1306;
  t16566 = -3.2*t16565*t1314;
  t16567 = t16538 + t16562 + t16566;
  t16857 = -0.748*t7178;
  t16858 = -3.2*t16565*t16265;
  t16859 = -3.2*t16557*t11468;
  t16860 = t16857 + t16858 + t16859;
  t16972 = -0.748*t16377;
  t16973 = -3.2*t16565*t16431;
  t16974 = -3.2*t16557*t16435;
  t16975 = -0.67 + t16972 + t16973 + t16974;
  t16864 = 3.2*t16557*t16617;
  t16865 = 3.2*t16565*t16624;
  t16866 = t16863 + t16864 + t16865;
  t16895 = t16863 + t16893 + t16894;
  t16667 = t16574 + t16665 + t16666;
  t16998 = 3.2*t16557*t16689;
  t16999 = 3.2*t16565*t16696;
  t17000 = t16998 + t16999;
  t17010 = -0.4*t1293*t16611;
  t17012 = -1.*t7178*t1295;
  t17013 = t16980 + t17012;
  t17014 = 0.8*t17013;
  t17015 = t17010 + t17011 + t17014;
  t17016 = -1.*var4[2]*t17015;
  t17017 = -0.4*t1293*t7178;
  t17018 = 0.4*t1275*t1295;
  t17019 = -1.*t1275*t1295;
  t17020 = t16988 + t17019;
  t17021 = 0.8*t17020;
  t17022 = t17017 + t17018 + t17021;
  t17023 = -1.*var4[0]*t17022;
  t16909 = 3.2*t16707*t16265;
  t16910 = 3.2*t16703*t11468;
  t16911 = t16909 + t16893 + t16910 + t16894;
  t16704 = 3.2*t16703*t1306;
  t16708 = 3.2*t16707*t1314;
  t16709 = t16665 + t16704 + t16708 + t16666;
  t17024 = 3.2*t16707*t16431;
  t17025 = 3.2*t16703*t16435;
  t17026 = 3.2*t16557*t16721;
  t17027 = 3.2*t16565*t16725;
  t17028 = t17024 + t17025 + t17026 + t17027;
  t16827 = 0.748*t1275;
  t16828 = 3.2*t16557*t1306;
  t16829 = 3.2*t16565*t1314;
  t16830 = t16827 + t16828 + t16829;
  t17070 = 0.748*t16377;
  t17071 = 3.2*t16565*t16431;
  t17072 = 3.2*t16557*t16435;
  t17073 = 0.67 + t17070 + t17071 + t17072;
  t17092 = Power(t16565,2);
  t17094 = Power(t16557,2);
  t17082 = -0.4*t16381*t1275;
  t17083 = t1293*t1275;
  t17084 = t7178*t1295;
  t17085 = t17083 + t17084;
  t17086 = -0.8*t17085;
  t17087 = t17082 + t17011 + t17086;
  t17088 = -0.4*t16381*t7178;
  t17089 = 0.4*t16611*t1295;
  t17090 = -0.8*t16990;
  t17091 = t17088 + t17089 + t17090;
  t16568 = -0.768*t1306;
  t16861 = -0.768*t11468;
  t16976 = -0.768*t16435;
  t16977 = -0.2 + t16976;
  t17097 = -0.768*t16557;
  t17098 = -0.2 + t17097;
  t17124 = 0.768*t16604*t16676;
  t17125 = 0.768*t16592*t16663;
  t16831 = 0.768*t1306;
  t16951 = 0.768*t11468;
  t17074 = 0.768*t16435;
  t17075 = 0.2 + t17074;
  t17118 = 0.768*t16557;
  t17119 = 0.2 + t17118;
  t17129 = 0.4*t1293*t1275;
  t16509 = -0.748*t1331;
  t16514 = -3.2*t16513*t1831;
  t16526 = -3.2*t16517*t3172;
  t16527 = t16509 + t16514 + t16526;
  t16852 = -0.748*t16322;
  t16853 = -3.2*t16517*t16349;
  t16854 = -3.2*t16513*t16334;
  t16855 = t16852 + t16853 + t16854;
  t16966 = -0.748*t16443;
  t16967 = -3.2*t16517*t16502;
  t16968 = -3.2*t16513*t16506;
  t16969 = -0.67 + t16966 + t16967 + t16968;
  t16870 = 3.2*t16513*t16636;
  t16871 = 3.2*t16517*t16643;
  t16872 = t16869 + t16870 + t16871;
  t16924 = t16869 + t16922 + t16923;
  t16738 = t16586 + t16736 + t16737;
  t17038 = 3.2*t16513*t16760;
  t17039 = 3.2*t16517*t16767;
  t17040 = t17038 + t17039;
  t16938 = 3.2*t16778*t16349;
  t16939 = 3.2*t16774*t16334;
  t16940 = t16938 + t16922 + t16939 + t16923;
  t16775 = 3.2*t16774*t1831;
  t16779 = 3.2*t16778*t3172;
  t16780 = t16736 + t16775 + t16779 + t16737;
  t17050 = 3.2*t16778*t16502;
  t17051 = 3.2*t16774*t16506;
  t17052 = 3.2*t16513*t16792;
  t17053 = 3.2*t16517*t16796;
  t17054 = t17050 + t17051 + t17052 + t17053;
  t16832 = 0.748*t1331;
  t16833 = 3.2*t16513*t1831;
  t16834 = 3.2*t16517*t3172;
  t16835 = t16832 + t16833 + t16834;
  t17076 = 0.748*t16443;
  t17077 = 3.2*t16517*t16502;
  t17078 = 3.2*t16513*t16506;
  t17079 = 0.67 + t17076 + t17077 + t17078;
  t17150 = Power(t16517,2);
  t17152 = Power(t16513,2);
  t16531 = -0.768*t1831;
  t16856 = -0.768*t16334;
  t16970 = -0.768*t16506;
  t16971 = -0.2 + t16970;
  t17155 = -0.768*t16513;
  t17156 = -0.2 + t17155;
  t17182 = 0.768*t16604*t16747;
  t17183 = 0.768*t16592*t16734;
  t16836 = 0.768*t1831;
  t16952 = 0.768*t16334;
  t17080 = 0.768*t16506;
  t17081 = 0.2 + t17080;
  t17176 = 0.768*t16513;
  t17177 = 0.2 + t17176;
  p_output1[0]=t1222 + t1236 - 6.8*t1263 + t1292 - 3.2*t1307 - 3.2*t1318 - 6.8*t1325 + t1334 - 3.2*t2010 - 3.2*t3180;
  p_output1[1]=t16353;
  p_output1[2]=t16508;
  p_output1[3]=t16527;
  p_output1[4]=t16531;
  p_output1[5]=t16567;
  p_output1[6]=t16568;
  p_output1[7]=0.768*t11468*t16570 + t16573*t16577 + 0.768*t16334*t16582 + t16585*t16589 + t16604*t16645 + t16648*t16656 + t16592*(6.4*t11468*t1306 + 6.4*t1314*t16265 + t16593 + t16594 + t16597 + t16598 + 6.4*t16334*t1831 + 6.4*t16349*t3172);
  p_output1[8]=t16664 + t16573*t16667 + t16592*(t16593 + t16594 + t16669 + t16670) + t16604*t16679 + t16648*t16698;
  p_output1[9]=t16664 + t16592*(t16669 + t16670) + t16573*t16709 + t16604*t16713 + t16648*t16727;
  p_output1[10]=t16735 + t16585*t16738 + t16592*(t16597 + t16598 + t16740 + t16741) + t16604*t16750 + t16648*t16769;
  p_output1[11]=t16735 + t16592*(t16740 + t16741) + t16585*t16780 + t16604*t16784 + t16648*t16798;
  p_output1[12]=6.8*t1263 + 3.2*t1307 + 3.2*t1318 + 6.8*t1325 + t16608 + t16629 + t16801 + t16802 + 3.2*t2010 + 3.2*t3180;
  p_output1[13]=t16818;
  p_output1[14]=t16826;
  p_output1[15]=t16830;
  p_output1[16]=t16831;
  p_output1[17]=t16835;
  p_output1[18]=t16836;
  p_output1[19]=-1.;
  p_output1[20]=t16353;
  p_output1[21]=t1222 + t1236 + t1292 + t1334 - 6.8*t16605 - 3.2*t16619 - 3.2*t16621 - 6.8*t16626 - 3.2*t16638 - 3.2*t16640;
  p_output1[22]=t16851;
  p_output1[23]=t16855;
  p_output1[24]=t16856;
  p_output1[25]=t16860;
  p_output1[26]=t16861;
  p_output1[27]=0.768*t16570*t16617 + 0.768*t16582*t16636 + t16592*t16645 + t16573*t16866 + t16585*t16872 + t16604*(t16593 + t16597 + 6.4*t11468*t16617 + 6.4*t16265*t16624 + 6.4*t16334*t16636 + 6.4*t16349*t16643 + t16874 + t16877) + t16648*t16889;
  p_output1[28]=t16592*t16679 + t16892 + t16573*t16895 + t16604*(t16593 + t16874 + t16897 + t16898) + t16648*t16906;
  p_output1[29]=t16592*t16713 + t16892 + t16604*(t16897 + t16898) + t16573*t16911 + t16648*t16918;
  p_output1[30]=t16592*t16750 + t16921 + t16585*t16924 + t16604*(t16597 + t16877 + t16926 + t16927) + t16648*t16935;
  p_output1[31]=t16592*t16784 + t16921 + t16604*(t16926 + t16927) + t16585*t16940 + t16648*t16947;
  p_output1[32]=t16818;
  p_output1[33]=t16606 + t16608 + t16620 + t16622 + t16627 + t16629 + t16639 + t16641 + t16801 + t16802;
  p_output1[34]=t16656;
  p_output1[35]=t16577;
  p_output1[36]=t16951;
  p_output1[37]=t16589;
  p_output1[38]=t16952;
  p_output1[39]=-1.;
  p_output1[40]=t16508;
  p_output1[41]=t16851;
  p_output1[42]=-3.3612 - 6.8*t16953 - 3.2*t16955 - 3.2*t16957 - 6.8*t16959 - 3.2*t16961 - 3.2*t16963;
  p_output1[43]=t16969;
  p_output1[44]=t16971;
  p_output1[45]=t16975;
  p_output1[46]=t16977;
  p_output1[47]=t16592*t16656 + t16604*t16889 + t16985 + t16993;
  p_output1[48]=0.768*t16570*t16689 + t16648*(6.4*t16435*t16689 + 6.4*t16431*t16696) + t16592*t16698 + t16604*t16906 + t16985 + t16993 + t16573*t17000;
  p_output1[49]=0.768*t16570*t16721 + t16648*(6.4*t16435*t16721 + 6.4*t16431*t16725) + t16592*t16727 + t16604*t16918 + t17016 + t17023 + t16573*t17028;
  p_output1[50]=0.768*t16582*t16760 + t16648*(6.4*t16506*t16760 + 6.4*t16502*t16767) + t16592*t16769 + t16604*t16935 + t16585*t17040;
  p_output1[51]=0.768*t16582*t16792 + t16648*(6.4*t16506*t16792 + 6.4*t16502*t16796) + t16592*t16798 + t16604*t16947 + t16585*t17054;
  p_output1[52]=t16826;
  p_output1[53]=t16656;
  p_output1[54]=3.3612 + 6.8*t16953 + 3.2*t16955 + 3.2*t16957 + 6.8*t16959 + 3.2*t16961 + 3.2*t16963;
  p_output1[55]=t17073;
  p_output1[56]=t17075;
  p_output1[57]=t17079;
  p_output1[58]=t17081;
  p_output1[59]=t17087;
  p_output1[60]=t17091;
  p_output1[61]=t16567;
  p_output1[62]=t16860;
  p_output1[63]=t16975;
  p_output1[64]=-1.58228 - 3.2*t17092 - 3.2*t17094;
  p_output1[65]=t17098;
  p_output1[66]=t16577*t16592 + t16604*t16866 + t16985 + t16993;
  p_output1[67]=t16592*t16667 + t16604*t16895 + t16985 + t16993 + t16648*t17000;
  p_output1[68]=0.768*t16570*t16703 + t16573*(6.4*t16557*t16703 + 6.4*t16565*t16707) + t16592*t16709 + t16604*t16911 + t17016 + t17023 + t16648*t17028;
  p_output1[69]=t16830;
  p_output1[70]=t16577;
  p_output1[71]=t17073;
  p_output1[72]=1.58228 + 3.2*t17092 + 3.2*t17094;
  p_output1[73]=t17119;
  p_output1[74]=t17087;
  p_output1[75]=t17091;
  p_output1[76]=t16568;
  p_output1[77]=t16861;
  p_output1[78]=t16977;
  p_output1[79]=t17098;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t11468*t16592 + 0.768*t16604*t16617 + t17016 + t17023;
  p_output1[82]=0.768*t16648*t16689 + t17016 + t17023 + t17124 + t17125;
  p_output1[83]=0.768*t16573*t16703 + 0.768*t16648*t16721 + t17124 + t17125 - 1.*(0.4*t1249*t1293 + t17018 + 0.8*(-1.*t1249*t1293 + t17019))*var4[0] - 1.*(t17011 + 0.8*(-1.*t1275*t1293 + t17012) + t17129)*var4[2];
  p_output1[84]=t16831;
  p_output1[85]=t16951;
  p_output1[86]=t17075;
  p_output1[87]=t17119;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t16979 - 0.8*(-1.*t1249*t1295 + t17083) + t17129;
  p_output1[90]=-0.4*t1275*t1295 - 0.8*t17020 + 0.4*t1293*t7178;
  p_output1[91]=t16527;
  p_output1[92]=t16855;
  p_output1[93]=t16969;
  p_output1[94]=-1.58228 - 3.2*t17150 - 3.2*t17152;
  p_output1[95]=t17156;
  p_output1[96]=t16589*t16592 + t16604*t16872;
  p_output1[97]=t16592*t16738 + t16604*t16924 + t16648*t17040;
  p_output1[98]=0.768*t16582*t16774 + t16585*(6.4*t16513*t16774 + 6.4*t16517*t16778) + t16592*t16780 + t16604*t16940 + t16648*t17054;
  p_output1[99]=t16835;
  p_output1[100]=t16589;
  p_output1[101]=t17079;
  p_output1[102]=1.58228 + 3.2*t17150 + 3.2*t17152;
  p_output1[103]=t17177;
  p_output1[104]=t16531;
  p_output1[105]=t16856;
  p_output1[106]=t16971;
  p_output1[107]=t17156;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t16334*t16592 + 0.768*t16604*t16636;
  p_output1[110]=0.768*t16648*t16760 + t17182 + t17183;
  p_output1[111]=0.768*t16585*t16774 + 0.768*t16648*t16792 + t17182 + t17183;
  p_output1[112]=t16836;
  p_output1[113]=t16952;
  p_output1[114]=t17081;
  p_output1[115]=t17177;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace Times[step, Pattern[Rabbit, Blank[]]]
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
